{
  "interval": {
    "intervalStart": "2025-10-18T00:00:00.000Z",
    "intervalEnd": "2025-10-19T00:00:00.000Z",
    "intervalType": "day"
  },
  "repository": "elizaos/elizaos.github.io",
  "overview": "From 2025-10-18 to 2025-10-19, elizaos/elizaos.github.io had 0 new PRs (0 merged), 0 new issues, and 0 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDONNAI987SQv6G",
      "title": "Enhancement: Add API cost estimation to ingestion pipeline",
      "author": "madjin",
      "number": 156,
      "repository": "elizaos/elizaos.github.io",
      "body": "# Enhancement: Add API cost estimation to ingestion pipeline\n\n## Context\nRunning `bun run pipeline ingest` with large date ranges can unexpectedly consume thousands of GitHub API calls, potentially hitting rate limits:\n- **Authenticated users**: 5,000 requests/hour\n- **GitHub Apps**: 15,000 requests/hour\n\nThis is especially problematic for:\n- Historical data ingestion (e.g., `--after 2024-01-01` on 20+ repos)\n- First-time project setup\n- Large active repositories with thousands of PRs/issues\n\n### Real-world example:\n- **23 repositories** × **52 weeks** × **~6 API calls per week** = **~7,176 API calls**\n- **Outcome**: Rate limit exhaustion, 1-2 hour wait, failed ingestion\n\nUsers need visibility into API cost before committing to large ingestions.\n\n## Proposal\nAdd `--estimate-only` flag and automatic pre-flight cost estimation that shows:\n- Estimated API call count\n- Risk level (LOW/MEDIUM/HIGH)\n- Estimated duration\n- Warning for HIGH risk operations\n\n## Implementation\n\n### Add cost estimation function to `cli/analyze-pipeline.ts`:\n\n```typescript\n// Simple API cost estimation helper\nfunction estimateApiCalls(\n  repositories: { owner: string; name: string }[],\n  intervalCount: number,\n): { total: number; risk: string; duration: number } {\n  const baseCallsPerRepo = intervalCount * 6; // ~6 calls per interval (PRs, issues, commits)\n  const total = repositories.length * baseCallsPerRepo;\n\n  const risk = total > 2000 ? \"HIGH\" : total > 500 ? \"MEDIUM\" : \"LOW\";\n  const duration = Math.ceil(total / 60); // ~60 calls per minute with rate limiting\n\n  return { total, risk, duration };\n}\n```\n\n### Add CLI flag to ingest command:\n\n```typescript\nprogram\n  .command(\"ingest\")\n  // ... existing options\n  .option(\n    \"--estimate-only\",\n    \"Show API cost estimation without executing ingestion\",\n    false,\n  )\n```\n\n### Add estimation logic before execution:\n\n```typescript\n// Calculate date range and intervals\nconst repositories = options.repository\n  ? pipelineConfig.repositories.filter(\n      (r) => `${r.owner}/${r.name}` === options.repository,\n    )\n  : pipelineConfig.repositories;\n\nconst daysDiff =\n  dateRange.endDate && dateRange.startDate\n    ? Math.ceil(\n        (new Date(dateRange.endDate).getTime() -\n          new Date(dateRange.startDate).getTime()) /\n          (1000 * 60 * 60 * 24),\n      )\n    : parseInt(options.days || \"7\");\nconst intervalCount = Math.ceil(daysDiff / 7); // Weekly intervals\n\nconst estimate = estimateApiCalls(repositories, intervalCount);\n\nrootLogger.info(`📊 Cost Estimation:`, {\n  repositories: repositories.length,\n  intervals: intervalCount,\n  estimatedApiCalls: estimate.total,\n  riskLevel: estimate.risk,\n  estimatedDuration: `${estimate.duration} minutes`,\n});\n\n// Handle estimate-only mode\nif (options.estimateOnly) {\n  console.log(`\\n📋 INGESTION ESTIMATE`);\n  console.log(`Repositories: ${repositories.length}`);\n  console.log(`Time intervals: ${intervalCount}`);\n  console.log(`Estimated API calls: ${estimate.total}`);\n  console.log(`Risk level: ${estimate.risk}`);\n  console.log(`Estimated duration: ${estimate.duration} minutes`);\n\n  if (estimate.risk === \"HIGH\") {\n    console.log(\n      `\\n⚠️  HIGH RISK: Consider using smaller date ranges or --repository flag`,\n    );\n  }\n  return;\n}\n\n// Warn on high-risk operations\nif (estimate.risk === \"HIGH\") {\n  rootLogger.warn(\n    `⚠️  High API usage detected (${estimate.total} calls). Monitor rate limits closely.`,\n  );\n}\n```\n\n## Benefits\n- ✅ Prevents accidental rate limit exhaustion\n- ✅ Better planning for large ingestions\n- ✅ User can test with `--estimate-only` before committing\n- ✅ Helpful for debugging and capacity planning\n- ✅ No behavior change for existing commands (estimation is informational)\n\n## Trade-offs\n- Estimation is approximate (actual calls may vary by ±20%)\n- Adds ~65 lines of code total (11-line function + 1-line option + ~50 lines logic)\n- Risk thresholds are somewhat arbitrary (can be tuned based on team preferences)\n\n## Usage Examples\n\n### Check cost before running:\n```bash\n$ bun run pipeline ingest --after 2024-01-01 --estimate-only\n\n📋 INGESTION ESTIMATE\nRepositories: 23\nTime intervals: 52\nEstimated API calls: 7,176\nRisk level: HIGH\nEstimated duration: 120 minutes\n\n⚠️  HIGH RISK: Consider using smaller date ranges or --repository flag\n```\n\n### Automatic estimation shown on every ingest:\n```bash\n$ bun run pipeline ingest --after 2024-01-01\n\n📊 Cost Estimation: {\n  repositories: 23,\n  intervals: 52,\n  estimatedApiCalls: 7176,\n  riskLevel: 'HIGH',\n  estimatedDuration: '120 minutes'\n}\n⚠️  High API usage detected (7176 calls). Monitor rate limits closely.\n\nStarting ingestion...\n```\n\n### Test single repo first:\n```bash\n$ bun run pipeline ingest --after 2024-01-01 --repository elizaos/eliza --estimate-only\n\n📋 INGESTION ESTIMATE\nRepositories: 1\nTime intervals: 52\nEstimated API calls: 312\nRisk level: MEDIUM\nEstimated duration: 6 minutes\n```\n\n## Testing\nTested with various scenarios in https://github.com/M3-org/op-hiscores:\n- ✅ Prevented 3 rate limit exhaustion scenarios during development\n- ✅ Accurate within 15% of actual API calls in 10+ test runs\n- ✅ Helped split large ingestions into manageable chunks\n\n## Files Modified\n- `cli/analyze-pipeline.ts` (~65 lines total: function + flag + logic)\n\n## References\n- Rate limiting best practices: https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api\n- Original implementation: M3-org/op-hiscores post-fork commits\n",
      "createdAt": "2025-10-17T21:22:45Z",
      "closedAt": "2025-10-18T07:26:03Z",
      "state": "CLOSED",
      "commentCount": 1
    },
    {
      "id": "I_kwDONNAI987SQvKZ",
      "title": "Enhancement: Add graceful shutdown to CLI pipeline",
      "author": "madjin",
      "number": 155,
      "repository": "elizaos/elizaos.github.io",
      "body": "# Enhancement: Add graceful shutdown to CLI pipeline\n\n## Context\nLong-running ingestion pipelines (historical data ingestion spanning months) can take hours, especially for large active repositories. Currently, pressing Ctrl+C immediately terminates the process, losing all in-progress work.\n\nThis is common when:\n- Ingesting historical data for the first time\n- Running large date range imports (e.g., `--after 2024-01-01`)\n- Processing multiple large repositories\n- Debugging or testing ingestion locally\n\n## Proposal\nAdd graceful shutdown handling that:\n1. **First Ctrl+C**: Completes current operation, saves progress, then exits cleanly\n2. **Second Ctrl+C**: Force exits immediately if user needs to stop now\n3. Shows clear messaging about shutdown state\n4. Allows resuming with same command (pipeline skips already-processed data)\n\n## Implementation\n\n### Add to `cli/analyze-pipeline.ts` (before program definition):\n\n```typescript\n// Graceful shutdown handler\nlet gracefulShutdown = false;\nprocess.on(\"SIGINT\", () => {\n  if (!gracefulShutdown) {\n    gracefulShutdown = true;\n    (global.process as { gracefulShutdown?: boolean }).gracefulShutdown = true;\n    console.log(\n      \"\\n⚠️  Graceful shutdown initiated... Current operations will complete.\",\n    );\n    console.log(\"Press Ctrl+C again to force exit.\");\n  } else {\n    console.log(\"\\n🔴 Force exit requested.\");\n    process.exit(1);\n  }\n});\n```\n\n### Update ingest command execution (in ingest action handler):\n\n```typescript\ntry {\n  await ingestPipeline(undefined, context);\n\n  if (gracefulShutdown) {\n    rootLogger.warn(\n      \"⚠️  Ingestion interrupted but current operations completed successfully!\",\n    );\n    rootLogger.info(\n      \"💡 You can resume by running the same command again - the pipeline will skip already processed data.\",\n    );\n  } else {\n    rootLogger.info(\"✅ Ingestion completed successfully!\");\n  }\n} catch (error: unknown) {\n  if (String(error).includes(\"GRACEFUL_SHUTDOWN\")) {\n    rootLogger.warn(\n      \"⚠️  Ingestion gracefully interrupted. Progress has been saved.\",\n    );\n    rootLogger.info(\"💡 Resume by running the same command again.\");\n    return;\n  }\n  throw error;\n}\n```\n\n### Update `src/lib/pipelines/types.ts` mapStep to respect shutdown:\n\n```typescript\nconst results = await pMap(\n  inputs,\n  async (item, index) => {\n    // Check for graceful shutdown before processing each item\n    if (\n      global.process &&\n      (global.process as { gracefulShutdown?: boolean }).gracefulShutdown\n    ) {\n      context.logger?.warn(\n        `Graceful shutdown requested. Skipping remaining items after ${index}/${inputs.length}`,\n      );\n      throw new Error(\"GRACEFUL_SHUTDOWN\");\n    }\n    return await operation(item, context);\n  },\n  {\n    concurrency: Math.max(1, concurrency),\n    stopOnError: false, // Continue processing other items even if one fails\n  },\n);\n\nreturn results.filter((r) => r !== null); // Filter out any null results from interrupted operations\n```\n\n## Benefits\n- ✅ Better UX for long-running operations (common in this project)\n- ✅ No lost work on interruption - current operation completes\n- ✅ Clear user feedback about shutdown state\n- ✅ Resume capability - just re-run the same command\n- ✅ Safety valve with double Ctrl+C for immediate exit\n\n## Trade-offs\n- Uses global state (`gracefulShutdown` flag on process object)\n- Adds ~30-40 lines of code\n- Slight complexity in pipeline execution flow\n\n## User Experience\n\n### Before (current behavior):\n```bash\n$ bun run pipeline ingest --after 2024-01-01\nFetching data for ethereum-optimism/optimism...\n^C [Process killed immediately, no progress saved]\n```\n\n### After (with graceful shutdown):\n```bash\n$ bun run pipeline ingest --after 2024-01-01\nFetching data for ethereum-optimism/optimism...\n^C\n⚠️  Graceful shutdown initiated... Current operations will complete.\nPress Ctrl+C again to force exit.\n⚠️  Ingestion interrupted but current operations completed successfully!\n💡 You can resume by running the same command again - the pipeline will skip already processed data.\n\n$ bun run pipeline ingest --after 2024-01-01\n[Resumes from where it left off]\n```\n\n## Testing\nTested extensively with multi-hour ingestions in: https://github.com/M3-org/op-hiscores\n- Graceful shutdown during PR ingestion ✅\n- Graceful shutdown during issue ingestion ✅\n- Resume capability verified ✅\n- Force exit (double Ctrl+C) verified ✅\n\n## Files Modified\n- `cli/analyze-pipeline.ts` (~20 lines added)\n- `src/lib/pipelines/types.ts` (~15 lines modified)\n\n## References\n- Original implementation: M3-org/op-hiscores commit range post-fork\n- Used successfully for 14 repository ingestions spanning 18K+ PRs\n",
      "createdAt": "2025-10-17T21:21:34Z",
      "closedAt": "2025-10-18T07:23:36Z",
      "state": "CLOSED",
      "commentCount": 1
    }
  ],
  "topPRs": [],
  "codeChanges": {
    "additions": 0,
    "deletions": 0,
    "files": 0,
    "commitCount": 0
  },
  "completedItems": [],
  "topContributors": [
    {
      "username": "0xRabbidfly",
      "avatarUrl": "https://avatars.githubusercontent.com/u/93952856?v=4",
      "totalScore": 6,
      "prScore": 0,
      "issueScore": 6,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "0xRabbidfly: Focused on identifying and documenting issues related to image handling across different plugins, creating and closing one issue in elizaos-plugins/plugin-knowledge (#43) and opening another in elizaos-plugins/plugin-telegram (#18) to address the inability to send images without rendering their URI."
    },
    {
      "username": "kempsterrrr",
      "avatarUrl": "https://avatars.githubusercontent.com/u/9025997?u=948aa0d0ac15ae42fd8099afac5351798044f74e&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "kempsterrrr: Focused on developer experience by creating an issue to add a gitignore to the eliza create process (elizaos/eliza#6074)."
    }
  ],
  "newPRs": 0,
  "mergedPRs": 0,
  "newIssues": 0,
  "closedIssues": 2,
  "activeContributors": 0
}