{
  "interval": {
    "intervalStart": "2025-10-21T00:00:00.000Z",
    "intervalEnd": "2025-10-22T00:00:00.000Z",
    "intervalType": "day"
  },
  "repository": "elizaos/elizaos.github.io",
  "overview": "From 2025-10-21 to 2025-10-22, elizaos/elizaos.github.io had 2 new PRs (1 merged), 0 new issues, and 2 active contributors.",
  "topIssues": [],
  "topPRs": [
    {
      "id": "PR_kwDONNAI986u8BEF",
      "title": "feat: Implement MVP Badge System for Contributor Achievements",
      "author": "madjin",
      "number": 161,
      "body": "## Overview\n\nImplements a minimal, efficient badge/achievement system with **5 badge types** across **3 tier levels** (beginner/elite/legend). Designed with DRY and YAGNI principles to minimize code overhead (~370 lines vs 2000+ for alternative approaches).\n\n## Badge Types\n\n- **Level Milestones**: Beginner (10), Elite (30), Legend (50)\n- **Activity Streaks**: 7, 30, 60 consecutive days\n- **PR Master**: 5, 25, 100 merged PRs\n- **Bug Hunter**: 3, 15, 50 bug fixes\n- **Review Champion**: 10, 50, 200 code reviews\n\n## Implementation Approach\n\n### âœ… Chosen: Ultra-Minimal Strategy (~370 LOC)\n\n**Key Decisions:**\n- **On-demand calculation** - No progress storage, reuses existing queries\n- **TypeScript constants** - Badge definitions in code (no DB table needed)\n- **Component reuse** - Extended `SkillCard` with badge mode prop\n- **Highest tier only** - UNIQUE DB constraint prevents duplicates\n- **Parallel to tags** - Separate concept but follows similar patterns\n\n**Benefits:**\n- âœ… Minimal maintenance surface area\n- âœ… Zero storage overhead for progress tracking\n- âœ… Maximum reuse of existing infrastructure\n- âœ… Fast to implement and validate\n\n### ðŸ”„ Alternative Strategies Considered\n\n**1. Moderate Approach (~600 LOC)**\n- Badge definitions stored in database\n- Separate evaluator functions per badge type\n- Progress calculation helper functions\n- Badge detail modal component\n\n*Trade-off:* More extensible but violates YAGNI since badge requirements unlikely to change frequently.\n\n**2. Config-Driven Approach (~800 LOC)**\n- Badge requirements in `pipeline.config.ts` like scoring rules\n- Generic rule engine evaluates any badge from config\n- Admin API to modify requirements without code changes\n\n*Trade-off:* Maximum flexibility but significant complexity increase. Only needed if requirements change often (they won't).\n\n## Technical Details\n\n### Database\n- New `user_badges` table with 7 columns\n- UNIQUE constraint on `(username, badgeType)` enforces highest tier only\n- Foreign key to users with CASCADE delete\n- Migration: `drizzle/0013_add_user_badges.sql`\n\n### Core Logic (3 files, 550 lines)\n- `src/lib/badges/types.ts` - Badge definitions with emoji icons & colors\n- `src/lib/badges/checker.ts` - Eligibility checking (reuses 5 existing query functions)\n- `src/lib/badges/award.ts` - Award/upgrade logic with automatic deduplication\n\n### Pipeline Integration\n- New `processContributorBadges` step in contributor pipeline\n- Runs after tag and score calculation\n- Parallel processing for all contributors\n- ~20 lines added to existing pipeline\n\n### Frontend\n- Extended `SkillCard` component with `mode=\"badge\"` prop\n- New \"Achievements\" section in user profile pages\n- Trophy icon and badge count display\n- Tooltip shows earned date and description\n\n## Trust & Anti-Gaming\n\n- âœ… Only tracks **whitelisted repositories** (24 repos)\n- âœ… Merged PRs require **maintainer approval**\n- âœ… Bug labels set by **maintainers**\n- âœ… Streak requires **sustained effort** (no backdating possible)\n- âœ… All thresholds based on **actual contributor distribution**\n\n## Testing\n\nâœ… TypeScript compilation passes  \nâœ… ESLint passes (no new warnings)  \nâœ… Database schema validated  \nâœ… Pipeline integration tested  \nâœ… UI components render correctly\n\n## Usage\n\nAfter merging:\n1. Run migration: `bun run db:migrate`\n2. Process contributors: `bun run pipeline process`\n3. Build site: `bun run build`\n4. Badges appear on user profile pages\n\n## Files Changed\n\n**Created (4 files):**\n- `drizzle/0013_add_user_badges.sql`\n- `src/lib/badges/types.ts`\n- `src/lib/badges/checker.ts`\n- `src/lib/badges/award.ts`\n\n**Modified (6 files):**\n- `src/lib/data/schema.ts` - Added userBadges table\n- `src/lib/pipelines/contributors/index.ts` - Badge processing step\n- `src/app/profile/[username]/queries.ts` - Badge fetching query\n- `src/app/profile/[username]/page.tsx` - Pass badges to component\n- `src/app/profile/[username]/components/UserProfile.tsx` - Achievements section\n- `src/components/skill-card.tsx` - Badge display mode\n\n---\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)",
      "repository": "elizaos/elizaos.github.io",
      "createdAt": "2025-10-21T22:06:16Z",
      "mergedAt": null,
      "additions": 3911,
      "deletions": 10
    },
    {
      "id": "PR_kwDONNAI986u8iUH",
      "title": "feat: add badge progress indicators and leaderboard badge counts",
      "author": "madjin",
      "number": 162,
      "body": "## Summary\n\nAdds two additional quick wins to enhance the badge system UX:\n\n1. **Badge count in leaderboard** - Display badge count next to XP/Level in leaderboard cards with trophy icon\n2. **Progress indicators** - Show \"Next Achievements\" section on profile pages with progress bars for each badge type\n\n## Changes\n\n### Leaderboard Badge Counts\n- Updated `getLeaderboard()` query to fetch badge counts for all users\n- Added `badgeCount` field to `LeaderboardUser` interface\n- Display trophy icon with count in `LeaderboardCard` component (only when badges earned)\n- Consistent styling with profile header badge count\n\n### Progress Indicators\n- Added `getUserBadgeProgress()` query to fetch current progress values\n- Added `getNextTier()` helper function to calculate next badge targets\n- Display \"Next Achievements\" section showing:\n  - Badge icon and name\n  - Current tier being targeted\n  - Progress bar with percentage complete\n  - Current value / target value\n  - Remaining count to reach next tier\n- Only shows badges that haven't reached max tier (legend)\n\n## Screenshots\n\nProgress indicators show users exactly how close they are to earning their next badge:\n- Level Milestone: Shows current level and progress to next tier\n- Activity Streak: Shows current streak and days remaining\n- PR Master: Shows merged PRs and count to next tier\n- Bug Hunter: Shows bugs fixed and remaining count\n- Review Champion: Shows reviews completed and remaining count\n\n## Implementation Details\n\n- Reuses existing badge checker functions for consistency\n- On-demand calculation (no additional database tables needed)\n- Progress bars use shadcn/ui Progress component\n- All badge progress fetched in parallel for performance\n- TypeScript strict typing throughout\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)",
      "repository": "elizaos/elizaos.github.io",
      "createdAt": "2025-10-21T23:12:15Z",
      "mergedAt": "2025-10-21T23:47:59Z",
      "additions": 229,
      "deletions": 51
    }
  ],
  "codeChanges": {
    "additions": 229,
    "deletions": 51,
    "files": 8,
    "commitCount": 7
  },
  "completedItems": [
    {
      "title": "feat: add badge progress indicators and leaderboard badge counts",
      "prNumber": 162,
      "type": "feature",
      "body": "## Summary\n\nAdds two additional quick wins to enhance the badge system UX:\n\n1. **Badge count in leaderboard** - Display badge count next to XP/Level in leaderboard cards with trophy icon\n2. **Progress indicators** - Show \"Next Achievements\"",
      "files": [
        "src/app/leaderboard/queries.ts",
        "src/app/profile/[username]/components/UserProfile.tsx",
        "src/app/profile/[username]/page.tsx",
        "src/app/profile/[username]/queries.ts",
        "src/components/leaderboard-card.tsx",
        "src/components/leaderboard.tsx",
        "src/components/skill-card.tsx",
        "src/lib/badges/types.ts"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 49.98377807791123,
      "prScore": 49.98377807791123,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "madjin",
      "avatarUrl": "https://avatars.githubusercontent.com/u/32600939?u=cdcf89f44c7a50906c7a80d889efa85023af2049&v=4",
      "totalScore": 43.7437738965761,
      "prScore": 43.5437738965761,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    },
    {
      "username": "tcm390",
      "avatarUrl": "https://avatars.githubusercontent.com/u/60634884?u=c6c41679b8322eaa0c81f72e0b4ed95e80f0ac16&v=4",
      "totalScore": 21.525573590279972,
      "prScore": 21.525573590279972,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "0xbbjoker",
      "avatarUrl": "https://avatars.githubusercontent.com/u/54844437?u=90fe1762420de6ad493a1c1582f1f70c0d87d8e2&v=4",
      "totalScore": 5,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 5,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "odilitime",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16395496?u=c9bac48e632aae594a0d85aaf9e9c9c69b674d8b&v=4",
      "totalScore": 0.33999999999999997,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "letmehateu",
      "avatarUrl": "https://avatars.githubusercontent.com/u/133153661?u=2217cec1ebd7bf22a8e4e3ace28b3183720dd444&v=4",
      "totalScore": 0.2,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    }
  ],
  "newPRs": 2,
  "mergedPRs": 1,
  "newIssues": 0,
  "closedIssues": 0,
  "activeContributors": 2
}