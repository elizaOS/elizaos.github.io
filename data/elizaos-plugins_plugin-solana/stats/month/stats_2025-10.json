{
  "interval": {
    "intervalStart": "2025-10-01T00:00:00.000Z",
    "intervalEnd": "2025-11-01T00:00:00.000Z",
    "intervalType": "month"
  },
  "repository": "elizaos-plugins/plugin-solana",
  "overview": "From 2025-10-01 to 2025-11-01, elizaos-plugins/plugin-solana had 9 new PRs (6 merged), 0 new issues, and 7 active contributors.",
  "topIssues": [],
  "topPRs": [
    {
      "id": "PR_kwDONkwLhs6uLDf_",
      "title": "improvements, type fixes, items from PR9",
      "author": "odilitime",
      "number": 16,
      "body": "<!-- CURSOR_SUMMARY -->\n> [!NOTE]\n> Refactors plugin config/init and Solana service, adds Token-2022 metadata parsing and batch utilities, updates docs/env and dependencies.\n> \n> - **Core/Service**:\n>   - Add Token-2022 metadata support (inline and pointer) with batch symbol/supply/decimals retrieval and improved caching.\n>   - New utilities: `verifySignature`, `isValidAddress`, batch helpers (`getAddressesTypes`, `getCirculatingSupplies`, `getDecimals`, `getTokenAccountsByKeypairs`).\n>   - Refactor Jupiter integration (async service load), account subscriptions, and `unsubscribeFromAccount` (now removes listener).\n>   - Enhance `parseTokenAccounts` output (symbol, supply, tokenProgram, isMutable), safer math, and logging.\n> - **Plugin Init**:\n>   - Require `SOLANA_RPC_URL`; optional action registration via `SOLANA_NO_ACTIONS`.\n>   - Register provider/actions dynamically; register chain on `INTEL_CHAIN`.\n> - **Config/Env**:\n>   - Replace `WALLET_*` with `SOLANA_*` keys in schema; relax some required fields; validation now reads from runtime settings.\n>   - Add `env.example` and ignore local env/db files.\n> - **Docs/Deps/Build**:\n>   - Rename package usage to `@elizaos/plugin-solana` in README.\n>   - Bump deps and add `@solana/spl-token-metadata`; update TypeScript/tsup; add declarationDir and test excludes.\n> \n> <sup>Written by [Cursor Bugbot](https://cursor.com/dashboard?tab=bugbot) for commit e93026c3b2ab695b2ca2dbef679e7bff9ca7c8e8. This will update automatically on new commits. Configure [here](https://cursor.com/dashboard?tab=bugbot).</sup>\n<!-- /CURSOR_SUMMARY -->\n\n\r\n\r\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n* **New Features**\n  * Batch token utilities (decimals, circulating supply, token accounts, address-type detection), improved token metadata parsing, and a modernized signature verification API; safer startup behavior and optional action registration.\n\n* **Documentation**\n  * Plugin name corrected and an env.example added with Solana configuration guidance and example values.\n\n* **Chores**\n  * Dependency updates, TypeScript build config refinement, and updated .gitignore to exclude local env/database files.\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-solana",
      "createdAt": "2025-10-16T21:04:02Z",
      "mergedAt": "2025-10-21T02:16:34Z",
      "additions": 849,
      "deletions": 311
    },
    {
      "id": "PR_kwDONkwLhs6sZ9J8",
      "title": "token 2022 upgrades",
      "author": "odilitime",
      "number": 14,
      "body": "<!-- CURSOR_SUMMARY -->\n> [!NOTE]\n> Adds Token-2022-aware token parsing (symbols, mutability, supply), batch symbol backfill, combined SPL+Token-2022 account discovery, and live wallet data updates via account subscriptions.\n> \n> - **Tokens / Metadata**:\n>   - Parse Token-2022 TLV metadata via `unpackMint`/extensions; derive `symbol`, `isMutable`, `supply`, and update `decimalsCache`.\n>   - Fallback to Metaplex PDA parsing for symbols and mutability when TLV absent.\n>   - New `getTokensSymbols(mints[])` for batched symbol lookup; `parseTokenAccounts` now accepts options and returns `symbol`, `supply`, `tokenProgram`, `isMutable`, `balanceUi` with background caching.\n> - **Wallet Data**:\n>   - Initialize wallet data immediately after public key load and subscribe to account changes to refresh on updates.\n>   - Birdeye results now backfill missing symbols via `getTokensSymbols`.\n>   - `getTokenAccountsByKeypair` now merges SPL and Token-2022 accounts, supports freshness via `notOlderThan`, and filters zero balances.\n> - **Swaps**:\n>   - Safer logging and amount formatting; improved post-balance diffing (including SOL sells) and decimals updates.\n> - **Subscriptions / Lifecycle**:\n>   - Account change subscription added; periodic updater removed from `start()`; `unsubscribeFromAccount` adjusted (RPC WS path commented out).\n> - **Misc**:\n>   - Minor constants/log tweaks; numeric literal cleanup; expanded SPL imports.\n> \n> <sup>Written by [Cursor Bugbot](https://cursor.com/dashboard?tab=bugbot) for commit cbd9a3f24f6dce80b56e9577716e74d0cee01227. This will update automatically on new commits. Configure [here](https://cursor.com/dashboard?tab=bugbot).</sup>\n<!-- /CURSOR_SUMMARY -->\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n- New Features\n  - Token-2022 TLV metadata parsing with robust token symbol extraction.\n  - Public APIs to fetch token symbols for single or multiple mints.\n\n- Improvements\n  - Immediate wallet data initialization and live updates on account changes.\n  - More accurate token balance parsing for classic SPL and Token-2022 with cached decimals/symbols.\n  - Bulk symbol backfill when external sources lack symbols and improved caching/freshness.\n  - Enhanced logging for cache/parsing flows.\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-solana",
      "createdAt": "2025-10-07T03:12:30Z",
      "mergedAt": "2025-10-16T02:24:01Z",
      "additions": 838,
      "deletions": 63
    },
    {
      "id": "PR_kwDONkwLhs6wrfei",
      "title": "Feat: wallet improvements with lazyloading and http routes",
      "author": "standujar",
      "number": 21,
      "body": "## üéØ Overview\r\n\r\nThis PR enhances the Solana plugin with **lazy wallet loading**, **HTTP API routes**, and **TypeScript types for API consumers**. It enables dynamic wallet injection, programmatic wallet access via HTTP, and type-safe client integration.\r\n\r\n---\r\n\r\n## üöÄ Key Features\r\n\r\n### 1. **Lazy Loading for Wallet Keys** ‚ú®\r\n\r\nAgents can now start **without a wallet** and have credentials injected dynamically via `runtime.setSetting()` - no restart required!\r\n\r\n**Architecture Changes:**\r\n- Renamed internal fields: `publicKey` ‚Üí `_publicKey`, `keypair` ‚Üí `_keypair`\r\n- Added promise caching (`_publicKeyPromise`, `_keypairPromise`) to prevent thundering herd\r\n- Implemented `ensurePublicKey()` and `ensureKeypair()` with smart null-handling\r\n\r\n**Smart Caching Strategy:**\r\n- Only caches successful loads\r\n- When `_publicKey` is null, every call rechecks `runtime.getSetting()`\r\n- Enables automatic wallet discovery once injected\r\n\r\n**API Changes:**\r\n- `getPublicKey()`: Now `async`, returns `Promise<PublicKey | null>`\r\n- `getWalletKeypair()`: Now `async`, throws if no wallet exists\r\n- All dependent methods updated to await key retrieval\r\n\r\n**Usage Pattern:**\r\n```typescript\r\n// Agent starts ‚Üí No wallet yet\r\nconst agent = await startAgent({ ... });\r\n\r\n// Later: inject wallet dynamically\r\nruntime.setSetting('SOLANA_PRIVATE_KEY', privateKey);\r\nruntime.setSetting('SOLANA_PUBLIC_KEY', publicKey);\r\n\r\n// Next action: Wallet automatically loaded ‚úì\r\nconst balance = await solanaService.getBalance('SOL');\r\n```\r\n\r\n---\r\n\r\n### 2. **HTTP API Routes** üåê\r\n\r\nNew RESTful endpoints for wallet information accessible via HTTP:\r\n\r\n| Endpoint | Method | Description |\r\n|----------|--------|-------------|\r\n| `/wallet/address` | GET | Get wallet public key |\r\n| `/wallet/balance` | GET | Get SOL balance (uses RPC, no API key needed) |\r\n| `/wallet/balance/:token` | GET | Get balance for specific token mint |\r\n| `/wallet/portfolio` | GET | Get full portfolio (with USD prices if `BIRDEYE_API_KEY` set) |\r\n| `/wallet/tokens` | GET | List all token accounts with non-zero balances |\r\n\r\n**Example Usage:**\r\n```bash\r\n# Base URL pattern\r\nhttp://localhost:3000/api/agents/{agentId}/plugins/chain_solana/{endpoint}\r\n\r\n# Get wallet address\r\ncurl http://localhost:3000/api/agents/abc-123/plugins/chain_solana/wallet/address\r\n\r\n# Get SOL balance\r\ncurl http://localhost:3000/api/agents/abc-123/plugins/chain_solana/wallet/balance\r\n\r\n# Get portfolio (includes USD values if Birdeye configured)\r\ncurl http://localhost:3000/api/agents/abc-123/plugins/chain_solana/wallet/portfolio\r\n```\r\n\r\n**Response Format:**\r\n```typescript\r\n{\r\n  \"success\": true,\r\n  \"data\": {\r\n    \"publicKey\": \"XioDPgLA1o7cuuhXZ7M3Fi1Lzqo2Cr8VudjY6ErtvYp2\",\r\n    \"balance\": 1.234,\r\n    \"symbol\": \"SOL\"\r\n  }\r\n}\r\n\r\n// Error format\r\n{\r\n  \"success\": false,\r\n  \"error\": {\r\n    \"code\": \"NO_WALLET\",\r\n    \"message\": \"No wallet configured\",\r\n    \"details\": \"...\"\r\n  }\r\n}\r\n```\r\n\r\n**Key Features:**\r\n- ‚úÖ **Free by default** - Uses Solana RPC (no API keys required)\r\n- ‚úÖ **Enhanced with Birdeye** - Add `BIRDEYE_API_KEY` for USD prices\r\n- ‚úÖ **Complements analyser plugin** - Simple data vs advanced analysis\r\n- ‚úÖ **Error handling** - Proper HTTP status codes (200, 404, 402, 500)\r\n\r\n---\r\n\r\n## üß™ Testing\r\n\r\n**Lazy Loading Tests:**\r\n```bash\r\nbun test __tests__/service/lazy-loading.test.ts\r\n```\r\n\r\n**Manual Route Testing:**\r\n```bash\r\n# Start agent with plugin-solana\r\n# Then test routes:\r\ncurl http://localhost:3000/api/agents/{agentId}/plugins/chain_solana/wallet/address | jq .\r\ncurl http://localhost:3000/api/agents/{agentId}/plugins/chain_solana/wallet/balance | jq .\r\ncurl http://localhost:3000/api/agents/{agentId}/plugins/chain_solana/wallet/portfolio | jq .\r\n```\r\n\r\n---\r\n\r\n## üí° Benefits\r\n\r\n### Lazy Loading\r\n- ‚úÖ Dynamic wallet creation post-initialization\r\n- ‚úÖ Zero-friction setup via `setSetting()`\r\n- ‚úÖ Graceful degradation when wallet unavailable\r\n- ‚úÖ Race condition prevention through promise caching\r\n\r\n### HTTP Routes\r\n- ‚úÖ Programmatic wallet access without ElizaOS SDK\r\n- ‚úÖ Works with any HTTP client (curl, fetch, axios, etc.)\r\n\r\n### TypeScript Types\r\n- ‚úÖ Type-safe client\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n* **New Features**\n  * Added HTTP endpoints to query wallet address, SOL/token balance, portfolio, and token list\n  * Exposed new API response types for wallet, balance, token, and portfolio responses\n  * Implemented lazy-loading wallet initialization for on-demand key loading\n\n* **Tests**\n  * Added tests validating on-demand wallet lazy-loading behavior\n\n* **Chores**\n  * Bumped a development dependency patch version\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-solana",
      "createdAt": "2025-10-30T18:08:05Z",
      "mergedAt": null,
      "additions": 736,
      "deletions": 184
    },
    {
      "id": "PR_kwDONkwLhs6whGmZ",
      "title": "feat: Implement Lazy Loading for Wallet Keys in Solana Plugin",
      "author": "standujar",
      "number": 20,
      "body": "## Summary\r\n\r\nImplements lazy loading for wallet keys to support dynamic wallet creation after agent initialization. This allows agents to start without a wallet and have one created later by another plugin or external source - **no manual reload needed, just `setSetting()` and it works!**\r\n\r\n## Problem Solved\r\n\r\n**Use Case**: An agent starts without a Solana wallet. Later, another plugin or an external API creates a wallet for the agent and adds it to the runtime settings.\r\n\r\n**Before**: The Solana plugin eagerly loaded wallet keys in the constructor. If no wallet existed at startup, the plugin would fail or throw errors. There was no way to add a wallet after the agent was already running.\r\n\r\n**After**: The Solana plugin can start without a wallet. When a wallet is created and added via `runtime.setSetting()`, the next wallet access **automatically picks up the new wallet** - no restart, no manual reload needed!\r\n\r\n## Real-World Scenario\r\n\r\n```typescript\r\n// Agent starts - no wallet yet\r\nconst agent = createAgent({ plugins: [solanaPlugin, another-plugin] });\r\n\r\n// Later:\r\nThe other plugin:\r\n  ‚Üí runtime.setSetting('WALLET_PRIVATE_KEY', privateKey)\r\n  ‚Üí runtime.setSetting('WALLET_PUBLIC_KEY', publicKey)\r\n  // That's it! ‚úÖ\r\n\r\n// Next swap/transfer action automatically loads the wallet!\r\n// No manual reload, no restart needed! üéâ\r\n```\r\n\r\n## How It Works\r\n\r\nThe lazy loading implementation uses a smart caching strategy:\r\n\r\n```typescript\r\nprivate async ensurePublicKey(): Promise<PublicKey | null> {\r\n  if (this._publicKey) return this._publicKey;  // ‚Üê Only caches if wallet exists!\r\n\r\n  // _publicKey is null ‚Üí Try to load from settings\r\n  const result = await getWalletKey(this.runtime, false);\r\n  if (!result.publicKey) return null;  // ‚Üê Returns null, doesn't cache it\r\n\r\n  this._publicKey = result.publicKey;  // ‚Üê Caches only on success\r\n  return this._publicKey;\r\n}\r\n```\r\n\r\n**Key insight**: `null` is **not** cached! Every call when `_publicKey = null` will re-check `runtime.getSetting()`. So once you call `setSetting()`, the next access automatically finds it!\r\n\r\n**`reloadKeys()` is only needed** if you want to replace an existing wallet with a new one.\r\n\r\n## Changes Made\r\n\r\n### Core Implementation\r\n\r\n- **Renamed private fields** to indicate lazy loading:\r\n  - `publicKey` ‚Üí `_publicKey`\r\n  - `keypair` ‚Üí `_keypair`\r\n\r\n- **Added promise caching** (anti-thundering herd pattern):\r\n  - `_publicKeyPromise` and `_keypairPromise` to prevent duplicate concurrent loads\r\n  - Load attempt counters for debugging\r\n\r\n- **Implemented lazy load methods**:\r\n  - `ensurePublicKey()`: Loads public key on-demand, caches only on success\r\n  - `ensureKeypair()`: Loads keypair on-demand, caches only on success\r\n  - `reloadKeys()`: Optional method to replace an existing wallet\r\n\r\n### API Changes\r\n\r\nMethods are now async to support lazy loading:\r\n\r\n- **`getPublicKey()`**: `PublicKey | null` ‚Üí `Promise<PublicKey | null>`\r\n  - Returns `null` gracefully if no wallet (no error thrown)\r\n  - Automatically retries on next call if `null`\r\n\r\n- **`getWalletKeypair()`**: `Keypair` ‚Üí `Promise<Keypair>`\r\n  - Throws error if no wallet (maintains backward compatibility)\r\n\r\n### Updated Callers\r\n\r\nAll methods calling wallet key access have been updated to `await`:\r\n\r\n**In SolanaWalletService:**\r\n- `getPortfolio()` - [service.ts:145-151](src/service.ts#L145-L151)\r\n- `getBalance()` - [service.ts:172-174](src/service.ts#L172-L174)\r\n- `transferSol()` - [service.ts:214](src/service.ts#L214)\r\n\r\n**In SolanaService:**\r\n- `getTokenAccounts()`, `getWalletKeypair()`, `updateWalletData()`, etc.\r\n\r\n## Usage: Create Wallet After Agent Init\r\n\r\n### Step 1: Agent starts without wallet\r\n\r\n```typescript\r\nconst agent = createAgent({\r\n  plugins: [solanaPlugin, another-plugin]\r\n});\r\n\r\n// Solana plugin is loaded but has no wallet yet\r\n// All wallet calls return null gracefully\r\n```\r\n\r\n### Step 2: Another plugin creates wallet\r\n\r\n```typescript\r\nasync createWallet(runtime: IAgentRuntime) {\r\n  const keypair = Keypair.generate();\r\n\r\n  // Just add to runtime settings - that's all!\r\n  runtime.setSetting('WALLET_PRIVATE_KEY', bs58.encode(keypair.secretKey));\r\n  runtime.setSetting('WALLET_PUBLIC_KEY', keypair.publicKey.toBase58());\r\n}\r\n```\r\n\r\n### Step 3: Wallet automatically available\r\n\r\n```typescript\r\n// User triggers any Solana action (swap, transfer, etc.)\r\n// ‚Üí Action calls solanaService.getPublicKey()\r\n// ‚Üí ensurePublicKey() checks _publicKey (null)\r\n// ‚Üí Calls runtime.getSetting() - finds the wallet!\r\n// ‚Üí Caches and returns it ‚úÖ\r\n\r\n// Works immediately, no manual steps needed!\r\n```\r\n\r\n### Optional: Replace an existing wallet\r\n\r\n```typescript\r\n// Only needed if replacing an existing wallet\r\nconst oldWallet = await solanaService.getPublicKey(); // Has wallet A\r\n\r\nruntime.setSetting('WALLET_PRIVATE_KEY', newPrivateKey);\r\nruntime.setSetting('WALLET_PUBLIC_KEY', newPublicKey);\r\n\r\n// Without reloadKeys: still returns wallet A (cached)\r\nconst stillOld = await solanaService.getPublicKey(); // ‚Üí Wallet A\r\n\r\n// With reloadKeys: loads wallet B\r\nawait solanaService.reloadKeys();\r\nconst newWallet = await solanaService.getPublicKey(); // ‚Üí Wallet B ‚úÖ\r\n```\r\n\r\n## Benefits\r\n\r\n1. **Dynamic wallet creation**: Agents can start without wallets\r\n2. **Zero-friction setup**: Just `setSetting()` and it works automatically\r\n3. **No restart required**: Add wallet at runtime, use immediately\r\n4. **Plugin independence**: Wallet creation can happen in any plugin or external source\r\n5. **Graceful degradation**: Returns `null` instead of crashing when no wallet\r\n6. **Race condition prevention**: Promise caching prevents duplicate loads\r\n7. **Smart caching**: Only caches successful loads, always retries on `null`\r\n\r\n## Files Changed\r\n\r\n- `src/service.ts` - Lazy loading implementation\r\n- `__tests__/service/lazy-loading-simple.test.ts` - Test with reloadKeys\r\n- `__tests__/service/test-without-reload.test.ts` - Test proving setSetting alone works\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n* **Bug Fixes**\n  * Improved wallet key retrieval reliability and performance\n  * Enhanced wallet balance, portfolio, and transfer operations\n\n* **Tests**\n  * Added comprehensive unit tests for wallet initialization scenarios\n\n* **Chores**\n  * Updated development dependencies\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-solana",
      "createdAt": "2025-10-30T03:04:55Z",
      "mergedAt": null,
      "additions": 243,
      "deletions": 53
    },
    {
      "id": "PR_kwDONkwLhs6tEXAN",
      "title": "fix: resolve TypeScript errors and improve logging",
      "author": "standujar",
      "number": 15,
      "body": "\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n* New Features\n  * App now continues in standalone mode if trading services are unavailable.\n  * Added startup retry with clearer progress logs for initialization.\n\n* Bug Fixes\n  * More reliable swap execution with consistent error handling.\n  * Wallet initialization is more resilient; portfolio shows $0 instead of blank when data is missing.\n  * Safer token/account parsing to prevent crashes on unexpected data.\n\n* Refactor\n  * Standardized logging and improved robustness across network, encoding, and parsing paths.\n\n* Chores\n  * Bumped version to 1.2.0.\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-solana",
      "createdAt": "2025-10-10T11:24:22Z",
      "mergedAt": "2025-10-16T02:45:48Z",
      "additions": 141,
      "deletions": 104
    }
  ],
  "codeChanges": {
    "additions": 1974,
    "deletions": 724,
    "files": 16,
    "commitCount": 63
  },
  "completedItems": [
    {
      "title": "token 2022 upgrades",
      "prNumber": 14,
      "type": "other",
      "body": "<!-- CURSOR_SUMMARY -->\n> [!NOTE]\n> Adds Token-2022-aware token parsing (symbols, mutability, supply), batch symbol backfill, combined SPL+Token-2022 account discovery, and live wallet data updates via account subscriptions.\n> \n> - **Tokens",
      "files": [
        "src/service.ts"
      ]
    },
    {
      "title": "fix: resolve TypeScript errors and improve logging",
      "prNumber": 15,
      "type": "bugfix",
      "body": "\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n* New Features\n  * App now continues in standalone mode if trading services are unavailable.\n  * Added startup retry with clearer progres",
      "files": [
        "package.json",
        "src/index.ts",
        "src/providers/wallet.ts",
        "src/service.ts"
      ]
    },
    {
      "title": "improvements, type fixes, items from PR9",
      "prNumber": 16,
      "type": "bugfix",
      "body": "<!-- CURSOR_SUMMARY -->\n> [!NOTE]\n> Refactors plugin config/init and Solana service, adds Token-2022 metadata parsing and batch utilities, updates docs/env and dependencies.\n> \n> - **Core/Service**:\n>   - Add Token-2022 metadata support (in",
      "files": [
        ".gitignore",
        "README.md",
        "env.example",
        "package.json",
        "src/environment.ts",
        "src/index.ts",
        "src/service.ts",
        "tsconfig.build.json",
        "tsconfig.json",
        "build.ts",
        "src/actions/swap.ts",
        "src/actions/transfer.ts",
        "src/keypairUtils.ts",
        "tsup.config.ts"
      ]
    },
    {
      "title": "fix: update build script to use Bun.build directly",
      "prNumber": 17,
      "type": "bugfix",
      "body": "## Summary\nFixed build script that was failing due to non-existent build-utils import.\n\n## Changes\n- Replace non-existent build-utils import with direct Bun.build API\n- Match plugin-openai build pattern for consistency\n- Add @types/node for",
      "files": [
        "build.ts",
        "bun.lock",
        "package.json",
        "tsconfig.build.json",
        "tsconfig.json",
        "tsup.config.ts"
      ]
    },
    {
      "title": "chore: bump version to 1.2.6",
      "prNumber": 19,
      "type": "other",
      "body": "\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n* **Chores**\n  * Version bump with no functional updates.\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "files": [
        "package.json"
      ]
    },
    {
      "title": "fix: lazy load SolanaService in SolanaWalletService",
      "prNumber": 18,
      "type": "bugfix",
      "body": "## Description\n\nFixes the race condition where `SolanaWalletService` fails to initialize with error \"Solana Service is required for Solana Wallet Service\".\n\n## Problem\n\nWhen both `SolanaService` and `SolanaWalletService` are registered from",
      "files": [
        "src/service.ts"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "standujar",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16385918?u=718bdcd1585be8447bdfffb8c11ce249baa7532d&v=4",
      "totalScore": 1163.9314493671034,
      "prScore": 1118.6354493671033,
      "issueScore": 0,
      "reviewScore": 42,
      "commentScore": 3.296,
      "summary": "standujar: Focused on significant refactoring of core components, introducing a new `mentionContext` interface in `elizaos/eliza#6030` which simplified the codebase (+520/-681 lines) and improved response logic. This core change was then propagated to dependent plugins like in `elizaos-plugins/plugin-discord#19`. They also fixed a bug in `elizaos-plugins/plugin-openrouter#15` related to AI SDK v5 tool results extraction. Their activity shows a primary focus on refactoring, bug fixes, and widespread configuration updates."
    },
    {
      "username": "0xbbjoker",
      "avatarUrl": "https://avatars.githubusercontent.com/u/54844437?u=90fe1762420de6ad493a1c1582f1f70c0d87d8e2&v=4",
      "totalScore": 723.5212606449593,
      "prScore": 661.2612606449593,
      "issueScore": 0,
      "reviewScore": 59.5,
      "commentScore": 2.76,
      "summary": "0xbbjoker: This month, 0xbbjoker focused on enhancing plugin functionality and improving code maintainability within the `elizaos/eliza` repository. They delivered a key feature by adding an offset parameter for memory retrieval in the SQL plugin (elizaos/eliza#6032), a substantial change of +516/-209 lines. Additionally, they improved codebase health by removing 289 lines of unused code in a separate refactoring effort (elizaos/eliza#6029). Their work shows a dual focus on feature development and code quality, and they also supported the team through code review and comments."
    },
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 670.1200366597221,
      "prScore": 662.2440366597222,
      "issueScore": 0,
      "reviewScore": 6,
      "commentScore": 1.876,
      "summary": "wtfsayo: This month, wtfsayo focused on improving code health and repository maintenance, executing a significant code standardization and formatting refactor in elizaos/eliza#6027 (+1124/-1385 lines). They also removed obsolete development files in elizaos/eliza#6026 and expanded the plugin ecosystem by adding a new relay plugin to the registry in elizaos-plugins/registry#234. Their work shows a primary focus on bugfixes and other maintenance, touching mostly code and configuration files."
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 222.96071819664678,
      "prScore": 202.72071819664677,
      "issueScore": 0,
      "reviewScore": 19.5,
      "commentScore": 0.74,
      "summary": "ChristopherTrimboli: No activity this month."
    },
    {
      "username": "odilitime",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16395496?u=c9bac48e632aae594a0d85aaf9e9c9c69b674d8b&v=4",
      "totalScore": 132.75471994256282,
      "prScore": 105.5367199425628,
      "issueScore": 0,
      "reviewScore": 25.5,
      "commentScore": 1.718,
      "summary": "odilitime: This month, odilitime's contributions were focused on supporting the team through code review. They completed 3 reviews, approving 2 and requesting changes on 1, and left 3 comments on pull requests."
    },
    {
      "username": "yungalgo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/113615973?u=92e0f29f7e2fbb8ce46ed13c51f692ca803de02d&v=4",
      "totalScore": 132.69516465887781,
      "prScore": 132.3551646588778,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": "yungalgo: This month, yungalgo's work was centered on improving documentation quality. They contributed a bugfix that resolved broken plugin links in the plugin registry overview page (elizaos/docs#74). All of their contributions, which also included commenting on an issue, were focused on bugfixes within the documentation."
    },
    {
      "username": "tcm390",
      "avatarUrl": "https://avatars.githubusercontent.com/u/60634884?u=c6c41679b8322eaa0c81f72e0b4ed95e80f0ac16&v=4",
      "totalScore": 128.7483067270025,
      "prScore": 118.74830672700249,
      "issueScore": 0,
      "reviewScore": 10,
      "commentScore": 0,
      "summary": "tcm390: Focused on bug fixes within the `elizaos/eliza` repository, merging two pull requests to improve stability. Their most significant contribution involved exposing the state cache and fixing bootstrap types in PR #6045. Overall, their work, which also included one code review approval, touched 53 files and was primarily categorized as bug fixes."
    },
    {
      "username": "madjin",
      "avatarUrl": "https://avatars.githubusercontent.com/u/32600939?u=cdcf89f44c7a50906c7a80d889efa85023af2049&v=4",
      "totalScore": 102.00888611710258,
      "prScore": 91.60888611710257,
      "issueScore": 10,
      "reviewScore": 0,
      "commentScore": 0.4,
      "summary": "madjin: Focused on enhancing the functionality and deployment process of the `elizaos.github.io` repository this month. They delivered a key fix to enable dynamic stat copying for all tracked repositories (#157) and improved project accessibility by adding a new deployment guide for forks (#158). Madjin also proactively planned future work by opening several enhancement issues and began implementing adaptive rate limiting to optimize performance (#160). Their contributions were primarily centered on bug fixes and feature work, touching code, configuration, and documentation files."
    },
    {
      "username": "alex-nax",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82507604?u=b3af75d82f80ed83007a77c351a64bdd9e5d67de&v=4",
      "totalScore": 42.98618344847266,
      "prScore": 42.786183448472656,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": "alex-nax: Focused on a significant feature implementation, opening a large pull request to add a custom storage service in `elizaos/eliza` (#6094). This substantial work-in-progress modifies 382 files, introducing over 35,000 lines of new code. The effort appears comprehensive, with contributions split across bugfixes, tests, and other code changes."
    },
    {
      "username": "0xRabbidfly",
      "avatarUrl": "https://avatars.githubusercontent.com/u/93952856?v=4",
      "totalScore": 39.90101911726088,
      "prScore": 33.90101911726088,
      "issueScore": 6,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "0xRabbidfly: This month, 0xRabbidfly focused on identifying and reporting user experience issues across the plugin ecosystem. They reported an issue where sending an image also rendered the URI for the user, creating tickets in `elizaos-plugins/plugin-knowledge` (#43) and `elizaos-plugins/plugin-telegram` (#18)."
    },
    {
      "username": "tylermcwilliams",
      "avatarUrl": "https://avatars.githubusercontent.com/u/39647101?u=03be301adc18b501478fe28dc7e921763a8ecf9f&v=4",
      "totalScore": 31.590661367769954,
      "prScore": 31.250661367769954,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.33999999999999997,
      "summary": "tylermcwilliams: Focused on expanding core functionality by implementing the new `generateText()` API in `elizaos/eliza` via PR #6062. This was a significant feature contribution, adding over 2,600 lines of code and representing their primary deliverable for the month. In addition to this implementation, they engaged in technical discussions by commenting on four issues. Their work shows a clear focus on new feature development, supported by corresponding test work."
    },
    {
      "username": "amlord",
      "avatarUrl": "https://avatars.githubusercontent.com/u/7287225?u=c9efedf5ceccac420c39b5bcd5b44e0f0692c4d5&v=4",
      "totalScore": 28.422573590279974,
      "prScore": 28.422573590279974,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "amlord: Focused on expanding the plugin ecosystem this month by adding the new 'nuggets' plugin to the registry (elizaos-plugins/registry#236). This feature contribution was accomplished through a small configuration file change."
    },
    {
      "username": "github-advanced-security",
      "avatarUrl": "https://avatars.githubusercontent.com/in/57789?v=4",
      "totalScore": 22.5,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 22.5,
      "commentScore": 0,
      "summary": "github-advanced-security: No activity this month."
    },
    {
      "username": "letmehateu",
      "avatarUrl": "https://avatars.githubusercontent.com/u/133153661?u=2217cec1ebd7bf22a8e4e3ace28b3183720dd444&v=4",
      "totalScore": 21.970674030744707,
      "prScore": 21.570674030744705,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.4,
      "summary": "letmehateu: This month, letmehateu focused on documentation maintenance for the `elizaos/eliza` repository. Their primary contribution was fixing an old and broken link via PR #6047. All of their code changes were concentrated in documentation files."
    },
    {
      "username": "5c0",
      "avatarUrl": "https://avatars.githubusercontent.com/u/93293719?u=8ccc6529b05747344b11a1a1fd4597a111be441b&v=4",
      "totalScore": 20.356835962612728,
      "prScore": 20.356835962612728,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "5c0: Focused on a significant refactoring effort this month, opening a large pull request in elizaos/eliza (#6063). This single PR represents a substantial undertaking, modifying 111 files with over 5,500 new lines of code. Their activity shows a clear focus on code refactoring within the elizaos/eliza repository."
    },
    {
      "username": "linear",
      "avatarUrl": "https://avatars.githubusercontent.com/in/20150?v=4",
      "totalScore": 10.3,
      "prScore": 0,
      "issueScore": 10.1,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": "linear: Focused on project planning and defining new work streams within the elizaos/eliza repository. This month, their contributions centered on creating 11 issues to scope out a range of tasks, from fixing a markdown rendering bug (#5688) to proposing significant new features like a unified messaging API (#6096) and creating a dedicated API/SDK documentation section (#6090)."
    },
    {
      "username": "borisudovicic",
      "avatarUrl": "https://avatars.githubusercontent.com/u/31806472?u=8935f4d43fd7e4eb9bf5ff92d54d4d2f8ac8a786&v=4",
      "totalScore": 10,
      "prScore": 0,
      "issueScore": 10,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "borisudovicic: Focused entirely on project planning and task definition within the elizaos/eliza repository this month. They created 30 issues to scope out a wide range of initiatives, including high-level efforts like \"API Redesign\" (#5917), \"Modernization\" (#5919), and \"Developer Experience Enhancements\" (#5931). This work also included defining new features such as a \"Cloud API Plugin for Framework LLMs\" (#6049), demonstrating a clear focus on shaping the project's future direction."
    },
    {
      "username": "matteo-brandolino",
      "avatarUrl": "https://avatars.githubusercontent.com/u/49117857?u=28be1833532b4c849d42f50867bd960807756272&v=4",
      "totalScore": 9.001573590279973,
      "prScore": 7.001573590279973,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "matteo-brandolino: This month, matteo-brandolino focused on identifying and reporting issues within the Eliza ecosystem. They opened a bug report concerning the Eliza CLI where imports were not being found (elizaos/eliza#6031) and contributed to discussions by commenting on two issues."
    },
    {
      "username": "icecoins",
      "avatarUrl": "https://avatars.githubusercontent.com/u/92659856?u=015d38990c9348e60ff7c4dfc86a68cc2d4cece1&v=4",
      "totalScore": 8.087768721952859,
      "prScore": 8.087768721952859,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "icecoins: This month, icecoins focused on extending the functionality of the Twitter plugin by opening a pull request to add media upload support via the Twitter API v2 (elizaos-plugins/plugin-twitter#45). This work remains in progress, with no other merged contributions or reviews during this period."
    },
    {
      "username": "ryanmstokes",
      "avatarUrl": "https://avatars.githubusercontent.com/u/4103619?u=fc6560a14f83b275fdc9442d884182000fb818e1&v=4",
      "totalScore": 4,
      "prScore": 0,
      "issueScore": 4,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "ryanmstokes: Focused on improving documentation quality this month by identifying and reporting an issue with incorrect plugin documentation in the elizaos/eliza repository (#6070)."
    },
    {
      "username": "schmidsi",
      "avatarUrl": "https://avatars.githubusercontent.com/u/103280?u=77faaad95c5f0f1af815e2e46438c0ceb3945031&v=4",
      "totalScore": 2.3000000000000003,
      "prScore": 0,
      "issueScore": 2.1,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": "schmidsi: This month, schmidsi's activity was focused on the `elizaos/eliza` repository, where they identified and reported a module resolution problem. They opened and closed issue #6088 to track this installation error. Their engagement also included commenting on two issues."
    },
    {
      "username": "douglasg14b",
      "avatarUrl": "https://avatars.githubusercontent.com/u/1400380?u=9c769fb37bf91378e109637db82591816eac7502&v=4",
      "totalScore": 2.3000000000000003,
      "prScore": 0,
      "issueScore": 2.1,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": "douglasg14b: This month, douglasg14b contributed to improving project documentation by identifying and reporting an issue where all plugin links were broken (elizaos/eliza#6061)."
    },
    {
      "username": "n1n-api",
      "avatarUrl": "https://avatars.githubusercontent.com/u/227003775?u=0230fac354b6d67db954e33b17282018cca32ee9&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "n1n-api: This month's activity was focused on proposing a new integration within the elizaos/eliza repository. They opened issue #6064 to suggest adding the n1n.ai API as a model provider. There were no other contributions during this period."
    },
    {
      "username": "kempsterrrr",
      "avatarUrl": "https://avatars.githubusercontent.com/u/9025997?u=948aa0d0ac15ae42fd8099afac5351798044f74e&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "kempsterrrr: This month, kempsterrrr's activity was focused on the elizaos/eliza repository, where they opened an issue to improve the developer setup by adding a .gitignore file during project creation (elizaos/eliza#6074)."
    },
    {
      "username": "Vianvolaeus",
      "avatarUrl": "https://avatars.githubusercontent.com/u/80061436?u=e8f6a2f503fa169946d1b92aefa5dedaafb388a9&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "TensorNull",
      "avatarUrl": "https://avatars.githubusercontent.com/u/129579691?u=fef786d866afd3d3a36397da036641c65906f3f2&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "TensorNull: This month, TensorNull's activity was limited to proposing a new feature by opening an issue in elizaos/eliza (#6055) to request CometAPI support."
    },
    {
      "username": "FellowTraveler",
      "avatarUrl": "https://avatars.githubusercontent.com/u/339191?u=236b9970b7c3ce1e3167921f25d32323f05d916f&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "FellowTraveler: No activity this month."
    }
  ],
  "newPRs": 9,
  "mergedPRs": 6,
  "newIssues": 0,
  "closedIssues": 0,
  "activeContributors": 7
}