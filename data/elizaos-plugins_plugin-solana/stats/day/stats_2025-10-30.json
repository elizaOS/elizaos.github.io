{
  "interval": {
    "intervalStart": "2025-10-30T00:00:00.000Z",
    "intervalEnd": "2025-10-31T00:00:00.000Z",
    "intervalType": "day"
  },
  "repository": "elizaos-plugins/plugin-solana",
  "overview": "From 2025-10-30 to 2025-10-31, elizaos-plugins/plugin-solana had 2 new PRs (0 merged), 0 new issues, and 1 active contributors.",
  "topIssues": [],
  "topPRs": [
    {
      "id": "PR_kwDONkwLhs6wrfei",
      "title": "Feat: wallet improvements with lazyloading and http routes",
      "author": "standujar",
      "number": 21,
      "body": "## üéØ Overview\r\n\r\nThis PR enhances the Solana plugin with **lazy wallet loading**, **HTTP API routes**, and **TypeScript types for API consumers**. It enables dynamic wallet injection, programmatic wallet access via HTTP, and type-safe client integration.\r\n\r\n---\r\n\r\n## üöÄ Key Features\r\n\r\n### 1. **Lazy Loading for Wallet Keys** ‚ú®\r\n\r\nAgents can now start **without a wallet** and have credentials injected dynamically via `runtime.setSetting()` - no restart required!\r\n\r\n**Architecture Changes:**\r\n- Renamed internal fields: `publicKey` ‚Üí `_publicKey`, `keypair` ‚Üí `_keypair`\r\n- Added promise caching (`_publicKeyPromise`, `_keypairPromise`) to prevent thundering herd\r\n- Implemented `ensurePublicKey()` and `ensureKeypair()` with smart null-handling\r\n\r\n**Smart Caching Strategy:**\r\n- Only caches successful loads\r\n- When `_publicKey` is null, every call rechecks `runtime.getSetting()`\r\n- Enables automatic wallet discovery once injected\r\n\r\n**API Changes:**\r\n- `getPublicKey()`: Now `async`, returns `Promise<PublicKey | null>`\r\n- `getWalletKeypair()`: Now `async`, throws if no wallet exists\r\n- All dependent methods updated to await key retrieval\r\n\r\n**Usage Pattern:**\r\n```typescript\r\n// Agent starts ‚Üí No wallet yet\r\nconst agent = await startAgent({ ... });\r\n\r\n// Later: inject wallet dynamically\r\nruntime.setSetting('SOLANA_PRIVATE_KEY', privateKey);\r\nruntime.setSetting('SOLANA_PUBLIC_KEY', publicKey);\r\n\r\n// Next action: Wallet automatically loaded ‚úì\r\nconst balance = await solanaService.getBalance('SOL');\r\n```\r\n\r\n---\r\n\r\n### 2. **HTTP API Routes** üåê\r\n\r\nNew RESTful endpoints for wallet information accessible via HTTP:\r\n\r\n| Endpoint | Method | Description |\r\n|----------|--------|-------------|\r\n| `/wallet/address` | GET | Get wallet public key |\r\n| `/wallet/balance` | GET | Get SOL balance (uses RPC, no API key needed) |\r\n| `/wallet/balance/:token` | GET | Get balance for specific token mint |\r\n| `/wallet/portfolio` | GET | Get full portfolio (with USD prices if `BIRDEYE_API_KEY` set) |\r\n| `/wallet/tokens` | GET | List all token accounts with non-zero balances |\r\n\r\n**Example Usage:**\r\n```bash\r\n# Base URL pattern\r\nhttp://localhost:3000/api/agents/{agentId}/plugins/chain_solana/{endpoint}\r\n\r\n# Get wallet address\r\ncurl http://localhost:3000/api/agents/abc-123/plugins/chain_solana/wallet/address\r\n\r\n# Get SOL balance\r\ncurl http://localhost:3000/api/agents/abc-123/plugins/chain_solana/wallet/balance\r\n\r\n# Get portfolio (includes USD values if Birdeye configured)\r\ncurl http://localhost:3000/api/agents/abc-123/plugins/chain_solana/wallet/portfolio\r\n```\r\n\r\n**Response Format:**\r\n```typescript\r\n{\r\n  \"success\": true,\r\n  \"data\": {\r\n    \"publicKey\": \"XioDPgLA1o7cuuhXZ7M3Fi1Lzqo2Cr8VudjY6ErtvYp2\",\r\n    \"balance\": 1.234,\r\n    \"symbol\": \"SOL\"\r\n  }\r\n}\r\n\r\n// Error format\r\n{\r\n  \"success\": false,\r\n  \"error\": {\r\n    \"code\": \"NO_WALLET\",\r\n    \"message\": \"No wallet configured\",\r\n    \"details\": \"...\"\r\n  }\r\n}\r\n```\r\n\r\n**Key Features:**\r\n- ‚úÖ **Free by default** - Uses Solana RPC (no API keys required)\r\n- ‚úÖ **Enhanced with Birdeye** - Add `BIRDEYE_API_KEY` for USD prices\r\n- ‚úÖ **Complements analyser plugin** - Simple data vs advanced analysis\r\n- ‚úÖ **Error handling** - Proper HTTP status codes (200, 404, 402, 500)\r\n\r\n---\r\n\r\n## üß™ Testing\r\n\r\n**Lazy Loading Tests:**\r\n```bash\r\nbun test __tests__/service/lazy-loading.test.ts\r\n```\r\n\r\n**Manual Route Testing:**\r\n```bash\r\n# Start agent with plugin-solana\r\n# Then test routes:\r\ncurl http://localhost:3000/api/agents/{agentId}/plugins/chain_solana/wallet/address | jq .\r\ncurl http://localhost:3000/api/agents/{agentId}/plugins/chain_solana/wallet/balance | jq .\r\ncurl http://localhost:3000/api/agents/{agentId}/plugins/chain_solana/wallet/portfolio | jq .\r\n```\r\n\r\n---\r\n\r\n## üí° Benefits\r\n\r\n### Lazy Loading\r\n- ‚úÖ Dynamic wallet creation post-initialization\r\n- ‚úÖ Zero-friction setup via `setSetting()`\r\n- ‚úÖ Graceful degradation when wallet unavailable\r\n- ‚úÖ Race condition prevention through promise caching\r\n\r\n### HTTP Routes\r\n- ‚úÖ Programmatic wallet access without ElizaOS SDK\r\n- ‚úÖ Works with any HTTP client (curl, fetch, axios, etc.)\r\n\r\n### TypeScript Types\r\n- ‚úÖ Type-safe client\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n* **New Features**\n  * Added HTTP endpoints to query wallet address, SOL/token balance, portfolio, and token list\n  * Exposed new API response types for wallet, balance, token, and portfolio responses\n  * Implemented lazy-loading wallet initialization for on-demand key loading\n\n* **Tests**\n  * Added tests validating on-demand wallet lazy-loading behavior\n\n* **Chores**\n  * Bumped a development dependency patch version\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-solana",
      "createdAt": "2025-10-30T18:08:05Z",
      "mergedAt": null,
      "additions": 736,
      "deletions": 184
    },
    {
      "id": "PR_kwDONkwLhs6whGmZ",
      "title": "feat: Implement Lazy Loading for Wallet Keys in Solana Plugin",
      "author": "standujar",
      "number": 20,
      "body": "## Summary\r\n\r\nImplements lazy loading for wallet keys to support dynamic wallet creation after agent initialization. This allows agents to start without a wallet and have one created later by another plugin or external source - **no manual reload needed, just `setSetting()` and it works!**\r\n\r\n## Problem Solved\r\n\r\n**Use Case**: An agent starts without a Solana wallet. Later, another plugin or an external API creates a wallet for the agent and adds it to the runtime settings.\r\n\r\n**Before**: The Solana plugin eagerly loaded wallet keys in the constructor. If no wallet existed at startup, the plugin would fail or throw errors. There was no way to add a wallet after the agent was already running.\r\n\r\n**After**: The Solana plugin can start without a wallet. When a wallet is created and added via `runtime.setSetting()`, the next wallet access **automatically picks up the new wallet** - no restart, no manual reload needed!\r\n\r\n## Real-World Scenario\r\n\r\n```typescript\r\n// Agent starts - no wallet yet\r\nconst agent = createAgent({ plugins: [solanaPlugin, another-plugin] });\r\n\r\n// Later:\r\nThe other plugin:\r\n  ‚Üí runtime.setSetting('WALLET_PRIVATE_KEY', privateKey)\r\n  ‚Üí runtime.setSetting('WALLET_PUBLIC_KEY', publicKey)\r\n  // That's it! ‚úÖ\r\n\r\n// Next swap/transfer action automatically loads the wallet!\r\n// No manual reload, no restart needed! üéâ\r\n```\r\n\r\n## How It Works\r\n\r\nThe lazy loading implementation uses a smart caching strategy:\r\n\r\n```typescript\r\nprivate async ensurePublicKey(): Promise<PublicKey | null> {\r\n  if (this._publicKey) return this._publicKey;  // ‚Üê Only caches if wallet exists!\r\n\r\n  // _publicKey is null ‚Üí Try to load from settings\r\n  const result = await getWalletKey(this.runtime, false);\r\n  if (!result.publicKey) return null;  // ‚Üê Returns null, doesn't cache it\r\n\r\n  this._publicKey = result.publicKey;  // ‚Üê Caches only on success\r\n  return this._publicKey;\r\n}\r\n```\r\n\r\n**Key insight**: `null` is **not** cached! Every call when `_publicKey = null` will re-check `runtime.getSetting()`. So once you call `setSetting()`, the next access automatically finds it!\r\n\r\n**`reloadKeys()` is only needed** if you want to replace an existing wallet with a new one.\r\n\r\n## Changes Made\r\n\r\n### Core Implementation\r\n\r\n- **Renamed private fields** to indicate lazy loading:\r\n  - `publicKey` ‚Üí `_publicKey`\r\n  - `keypair` ‚Üí `_keypair`\r\n\r\n- **Added promise caching** (anti-thundering herd pattern):\r\n  - `_publicKeyPromise` and `_keypairPromise` to prevent duplicate concurrent loads\r\n  - Load attempt counters for debugging\r\n\r\n- **Implemented lazy load methods**:\r\n  - `ensurePublicKey()`: Loads public key on-demand, caches only on success\r\n  - `ensureKeypair()`: Loads keypair on-demand, caches only on success\r\n  - `reloadKeys()`: Optional method to replace an existing wallet\r\n\r\n### API Changes\r\n\r\nMethods are now async to support lazy loading:\r\n\r\n- **`getPublicKey()`**: `PublicKey | null` ‚Üí `Promise<PublicKey | null>`\r\n  - Returns `null` gracefully if no wallet (no error thrown)\r\n  - Automatically retries on next call if `null`\r\n\r\n- **`getWalletKeypair()`**: `Keypair` ‚Üí `Promise<Keypair>`\r\n  - Throws error if no wallet (maintains backward compatibility)\r\n\r\n### Updated Callers\r\n\r\nAll methods calling wallet key access have been updated to `await`:\r\n\r\n**In SolanaWalletService:**\r\n- `getPortfolio()` - [service.ts:145-151](src/service.ts#L145-L151)\r\n- `getBalance()` - [service.ts:172-174](src/service.ts#L172-L174)\r\n- `transferSol()` - [service.ts:214](src/service.ts#L214)\r\n\r\n**In SolanaService:**\r\n- `getTokenAccounts()`, `getWalletKeypair()`, `updateWalletData()`, etc.\r\n\r\n## Usage: Create Wallet After Agent Init\r\n\r\n### Step 1: Agent starts without wallet\r\n\r\n```typescript\r\nconst agent = createAgent({\r\n  plugins: [solanaPlugin, another-plugin]\r\n});\r\n\r\n// Solana plugin is loaded but has no wallet yet\r\n// All wallet calls return null gracefully\r\n```\r\n\r\n### Step 2: Another plugin creates wallet\r\n\r\n```typescript\r\nasync createWallet(runtime: IAgentRuntime) {\r\n  const keypair = Keypair.generate();\r\n\r\n  // Just add to runtime settings - that's all!\r\n  runtime.setSetting('WALLET_PRIVATE_KEY', bs58.encode(keypair.secretKey));\r\n  runtime.setSetting('WALLET_PUBLIC_KEY', keypair.publicKey.toBase58());\r\n}\r\n```\r\n\r\n### Step 3: Wallet automatically available\r\n\r\n```typescript\r\n// User triggers any Solana action (swap, transfer, etc.)\r\n// ‚Üí Action calls solanaService.getPublicKey()\r\n// ‚Üí ensurePublicKey() checks _publicKey (null)\r\n// ‚Üí Calls runtime.getSetting() - finds the wallet!\r\n// ‚Üí Caches and returns it ‚úÖ\r\n\r\n// Works immediately, no manual steps needed!\r\n```\r\n\r\n### Optional: Replace an existing wallet\r\n\r\n```typescript\r\n// Only needed if replacing an existing wallet\r\nconst oldWallet = await solanaService.getPublicKey(); // Has wallet A\r\n\r\nruntime.setSetting('WALLET_PRIVATE_KEY', newPrivateKey);\r\nruntime.setSetting('WALLET_PUBLIC_KEY', newPublicKey);\r\n\r\n// Without reloadKeys: still returns wallet A (cached)\r\nconst stillOld = await solanaService.getPublicKey(); // ‚Üí Wallet A\r\n\r\n// With reloadKeys: loads wallet B\r\nawait solanaService.reloadKeys();\r\nconst newWallet = await solanaService.getPublicKey(); // ‚Üí Wallet B ‚úÖ\r\n```\r\n\r\n## Benefits\r\n\r\n1. **Dynamic wallet creation**: Agents can start without wallets\r\n2. **Zero-friction setup**: Just `setSetting()` and it works automatically\r\n3. **No restart required**: Add wallet at runtime, use immediately\r\n4. **Plugin independence**: Wallet creation can happen in any plugin or external source\r\n5. **Graceful degradation**: Returns `null` instead of crashing when no wallet\r\n6. **Race condition prevention**: Promise caching prevents duplicate loads\r\n7. **Smart caching**: Only caches successful loads, always retries on `null`\r\n\r\n## Files Changed\r\n\r\n- `src/service.ts` - Lazy loading implementation\r\n- `__tests__/service/lazy-loading-simple.test.ts` - Test with reloadKeys\r\n- `__tests__/service/test-without-reload.test.ts` - Test proving setSetting alone works\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n* **Bug Fixes**\n  * Improved wallet key retrieval reliability and performance\n  * Enhanced wallet balance, portfolio, and transfer operations\n\n* **Tests**\n  * Added comprehensive unit tests for wallet initialization scenarios\n\n* **Chores**\n  * Updated development dependencies\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-solana",
      "createdAt": "2025-10-30T03:04:55Z",
      "mergedAt": null,
      "additions": 243,
      "deletions": 53
    }
  ],
  "codeChanges": {
    "additions": 0,
    "deletions": 0,
    "files": 0,
    "commitCount": 3
  },
  "completedItems": [],
  "topContributors": [
    {
      "username": "standujar",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16385918?u=718bdcd1585be8447bdfffb8c11ce249baa7532d&v=4",
      "totalScore": 85.19947828766486,
      "prScore": 84.99947828766486,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    },
    {
      "username": "0xbbjoker",
      "avatarUrl": "https://avatars.githubusercontent.com/u/54844437?u=90fe1762420de6ad493a1c1582f1f70c0d87d8e2&v=4",
      "totalScore": 36.970045395879424,
      "prScore": 36.970045395879424,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "Vianvolaeus",
      "avatarUrl": "https://avatars.githubusercontent.com/u/80061436?u=e8f6a2f503fa169946d1b92aefa5dedaafb388a9&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    }
  ],
  "newPRs": 2,
  "mergedPRs": 0,
  "newIssues": 0,
  "closedIssues": 0,
  "activeContributors": 1
}