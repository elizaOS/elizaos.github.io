["PR_kwDOMT5cIs6SBop6", 4247, "feat: message api", "", "MERGED", 1, "tcm390", "2025-04-10T02:17:19Z", "2025-04-10T02:17:36Z", "2025-04-10T02:17:35Z", "2025-04-10T02:17:35Z", "elizaos/eliza", "99953467cf05605798692868e0a932e081fde97d", "9aaac11ade4582fba668f52fa0680baff2b5c609", 130, 0, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6SBZuz", 4246, "Bug: Remove Duplicate Declaration in api.ts", "## Fix duplicate variable declaration in api.ts\r\n\r\n### Problem\r\n\r\nThe build was failing with the following error:\r\n\r\nThis was happening because in the json parsing error handler, the `text` variable was being declared twice:\r\n\r\n- First at line 104: `const text = await response.text();`\r\n- Then again at line 110: `const text = await response.text();`\r\n\r\nThis duplicate declaration was causing the TypeScript compiler to fail. Specifically \"bun run build\" was failing.\r\n\r\n### Solution\r\n\r\nRemoved the second declaration of the `text` variable.\r\n\r\n### Changes\r\n\r\n- Removed the duplicate declaration at line 110, keeping only the first declaration  \r\n- Everything else same\r\n\r\nThis change ensures api.ts properly handles json parsing errors while maintaining a clean build process.", "OPEN", 0, "yungalgo", "2025-04-10T01:07:20Z", "2025-04-10T01:07:26Z", null, null, "elizaos/eliza", "75f70a277ed11f617751f3275739b64b756d8517", "9aaac11ade4582fba668f52fa0680baff2b5c609", 0, 5, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6SAWmy", 4245, "added : plugin-gtk", "# Relates to\r\n\r\n[Issue #412 \u2013 Implement GTK Plugin on eliza v2](https://github.com/Sifchain/sa-eliza/issues/412)\r\n\r\n# Risks\r\n\r\n**Medium** \u2013 This introduces a new plugin (`GTKPlugin`) into the eliza v2 plugin system. Any issues in integration or message handling could affect plugin registration, runtime execution, or compatibility with agent pipelines.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR implements the `GTKPlugin` within the eliza v2 architecture. The plugin registers itself to receive `gtk_query` messages and processes them according to the expected format. It includes basic validation and a response structure compatible with eliza's plugin communication protocol.\r\n\r\n## What kind of change is this?\r\n\r\n**Feature** \u2013 Non-breaking change which adds new plugin functionality.\r\n\r\n# Documentation changes needed?\r\n\r\n\u2705 My changes **require a change to the project documentation.**  \r\nThe following should be updated:\r\n\r\n- Plugin architecture guide: Add section for `GTKPlugin`\r\n- Message contract/spec for `gtk_query`\r\n- Usage examples or integration instructions, if available\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\n- Start by reviewing the new `Plugin-GTK` package.\r\n\r\n## Detailed testing steps\r\n\r\n- We can't test the plugin because GTK app is down now.\r\n", "OPEN", 0, "Samarthsinghal28", "2025-04-09T20:52:17Z", "2025-04-10T00:51:17Z", null, null, "elizaos/eliza", "186894940d4c81546ff86a1cf4f90fd06bb5dcbd", "9aaac11ade4582fba668f52fa0680baff2b5c609", 10561, 0, 21, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R-Ndk", 4244, "feat: add compat runtime with rag, memory, goal-task, relationships", "# Here is what I have so far and also the list of remaining TODOs:\r\n\r\n# Compatibility Layer Implementation Tasks:\r\n\r\n## Overview\r\n\r\nI have now processed all three codebases:\r\n\r\n- **core-plugin-v1 (Compatibility Layer)**: The bridge aiming to adapt V1 plugins.\r\n- **core-plugin-v2 (Target Runtime)**: The modern runtime environment.\r\n- **core-plugin-v1 (Original V1 Core)**: The original runtime the V1 plugins were built against.\r\n\r\nThis complete picture allows for a much more precise analysis of the remaining gaps in the compatibility layer (CompatAgentRuntime).\r\n\r\n## Refined Task List for CompatAgentRuntime Implementation\r\n\r\n### Area: State Composition (composeState)\r\n\r\n#### Task 1: Data Fetching and Translation\r\n\r\n**Explanation**: The V1 composeState fetched various data points (actors, messages, goals, knowledge) using specific V1 runtime/DB methods. The compat composeState needs to replicate this using its own methods (which delegate to V2 and translate results).\r\n\r\n**Action**: Inside CompatAgentRuntime.composeState:\r\n\r\n- Call `this.getActorDetails({ roomId })` to get V1 Actor[].\r\n- Call `this.messageManager.getMemories({ roomId, count: this.getConversationLength(), unique: false })` to get V1 Memory[] for recent messages.\r\n- Call `this.getGoals({ agentId: this.agentId, roomId, onlyInProgress: false, count: 10 })` to get V1 Goal[].\r\n- Determine if RAG is enabled (based on `this.character.settings.ragKnowledge`).\r\n- If RAG: Call `this.ragKnowledgeManager.getKnowledge({ query: message.content.text, /* add context */ limit: 8 })` to get V1 RAGKnowledgeItem[].\r\n- If not RAG: Call `this.knowledgeManager.searchMemoriesByEmbedding(...)` (simulating V1 knowledge.get) to get V1 Memory[] representing knowledge fragments. Translate these to V1 KnowledgeItem[].\r\n- Fetch recent interactions if needed (V1 logic: getRecentInteractions). This involves calling `this.databaseAdapter.getRoomsForParticipants` and `this.messageManager.getMemoriesByRoomIds`.\r\n\r\n**Context**: V1 runtime.ts -> composeState data fetching logic. V2 IAgentRuntime methods. core-plugin-v1 translators.\r\n\r\n#### Task 2: Import and Use V1 Formatting Helpers\r\n\r\n**Explanation**: V1 composeState relied on helper functions (formatActors, formatMessages, formatGoalsAsString, formatPosts, formatKnowledge) to create the string representations expected in the V1 State object.\r\n\r\n**Action**:\r\n\r\n- Copy or adapt the V1 helper functions (formatActors, formatMessages, formatTimestamp from messages.ts; formatGoalsAsString from goals.ts; formatPosts from posts.ts; formatKnowledge from runtime.ts) into the core-plugin-v1 package (e.g., in utils/formatting.ts).\r\n- In CompatAgentRuntime.composeState, after fetching and translating data (Task 1), call these imported helpers to generate the required strings (e.g., actors, recentMessages, goals, recentPosts, knowledge).\r\n\r\n**Context**: V1 runtime.ts -> composeState formatting calls. V1 helper functions source code.\r\n\r\n#### Task 3: Implement V1 Provider Logic (getProviders)\r\n\r\n**Explanation**: V1 composeState called a getProviders helper which iterated through runtime.providers, called each provider's get method, and joined the results into a string.\r\n\r\n**Action**: Inside CompatAgentRuntime.composeState:\r\n\r\n- Filter this.providers based on the V1 logic (non-private, non-dynamic unless explicitly included/filtered - V1 getProviders didn't have this filtering, it just ran all). Correction: V1 getProviders ran all registered providers.\r\n- Use Promise.all to call `provider.get(this, v1Message, v1State)` for each V1 provider instance stored in this.providers.\r\n- Filter out null/empty results.\r\n- Join the string results with \\n to create the providers string for the V1 State object.\r\n\r\n**Context**: V1 providers.ts -> getProviders. V1 runtime.ts -> composeState. V1 Provider interface.\r\n\r\n#### Task 4: Implement V1 Action/Evaluator Formatting\r\n\r\n**Explanation**: V1 composeState formatted available actions and evaluators using helpers (formatActionNames, formatActions, composeActionExamples, formatEvaluators, etc.) to include in the state for the LLM.\r\n\r\n**Action**:\r\n\r\n- Copy or adapt V1 formatting helpers (composeActionExamples, formatActionNames, formatActions from actions.ts; formatEvaluatorExamples, formatEvaluatorNames, formatEvaluators from evaluators.ts) into core-plugin-v1/utils/formatting.ts.\r\n- Inside CompatAgentRuntime.composeState, after filtering actions/evaluators based on validation (see Task 5):\r\n- Call the imported helpers using this.actions and this.evaluators to generate strings for actionNames, actions, actionExamples, evaluators, evaluatorNames, evaluatorExamples.\r\n\r\n**Context**: V1 runtime.ts -> composeState. V1 formatting helpers source code.\r\n\r\n#### Task 5: Filter Actions/Evaluators in composeState\r\n\r\n**Explanation**: V1 composeState dynamically filtered the actions and evaluators included in the state based on their validate methods before formatting them.\r\n\r\n**Action**: Inside CompatAgentRuntime.composeState:\r\n\r\n- Before formatting actions/evaluators (Task 4):\r\n- Use Promise.all to run `action.validate(this, v1Message, /* partially built state */)` for each action in this.actions. Filter the list to keep only valid actions.\r\n- Use Promise.all to run `evaluator.validate(this, v1Message, /* partially built state */)` for each evaluator in this.evaluators. Filter the list.\r\n- Use these filtered lists when calling the formatting helpers in Task 4.\r\n\r\n**Context**: V1 runtime.ts -> composeState validation logic. V1 Action.validate, Evaluator.validate.\r\n\r\n#### Task 6: Assemble Final V1 State Object\r\n\r\n**Explanation**: Combine all fetched, translated, and formatted data into the flat structure defined by the V1 State interface.\r\n\r\n**Action**: Inside CompatAgentRuntime.composeState, construct the final state object:\r\n\r\n```typescript\r\nconst v1State: State = {\r\n    agentId: this.agentId,\r\n    agentName: /* fetched agent name */,\r\n    bio: /* formatted bio */,\r\n    lore: /* formatted lore */,\r\n    // ... other formatted strings from Tasks 2, 3, 4\r\n    actors: /* formatted actors string */,\r\n    recentMessages: /* formatted messages string */,\r\n    goals: /* formatted goals string */,\r\n    // ... etc\r\n    // Raw data arrays\r\n    actorsData: /* translated V1 Actor[] */,\r\n    recentMessagesData: /* translated V1 Memory[] */,\r\n    goalsData: /* translated V1 Goal[] */,\r\n    knowledgeData: /* V1 KnowledgeItem[] or RAGKnowledgeItem[] */,\r\n    actionsData: /* filtered V1 Action[] */,\r\n    evaluatorsData: /* filtered V1 Evaluator[] */,\r\n    // ... other fields from V1 State interface\r\n    ...additionalKeys, // Apply overrides/additions\r\n};\r\nreturn v1State;\r\n```\r\n\r\n**Context**: V1 types.ts -> State interface. V1 runtime.ts -> composeState final object assembly.\r\n\r\n### Area: State Update (updateRecentMessageState)\r\n\r\n#### Task 7: Implement updateRecentMessageState\r\n\r\n**Explanation**: V1 updateRecentMessageState refreshed the message-related fields (recentMessages, recentMessagesData, attachments) in an existing state object.\r\n\r\n**Action**: Inside CompatAgentRuntime.updateRecentMessageState:\r\n\r\n- Get roomId and actorsData from the input state.\r\n- Call `this.messageManager.getMemories({ roomId, count: this.getConversationLength(), unique: false })` to get fresh V1 Memory[].\r\n- Use the imported V1 formatMessages helper to create the recentMessages string.\r\n- Implement V1 attachment logic: find the last message with attachments, determine the time window (1 hour before), filter messages within the window, flatten attachments, format them.\r\n- Return a new state object `{ ...state, recentMessages, recentMessagesData, attachments }`.\r\n\r\n**Context**: V1 runtime.ts -> updateRecentMessageState. V1 formatMessages. V1 attachment logic.\r\n\r\n### Area: Action Processing (processActions)\r\n\r\n#### Task 8: Adapt V2 Input/Looping\r\n\r\n**Explanation**: V2 processActions receives an array of responses (V2 Memory[]), and each response can have an array of actions (strings) in its content. V1 received a single response (V1 Memory) with a single optional action string.\r\n\r\n**Action**: Inside CompatAgentRuntime.processActions:\r\n\r\n- Iterate through the input responses array (V1 Memory[] translated from V2).\r\n- Inside the loop, check response.content.action (the V1 field). If it exists:\r\n- Perform the action lookup and execution (Task 9).\r\n\r\nNote: The compat layer needs to decide how to handle the V2 concept of multiple actions per response if that translation occurs. The simplest approach is to process only the first action found or prioritize based on V1 plugin expectations. The current V1 processActions signature only takes one response array, implying it might have expected multiple responses but only one action per response. Let's assume we process response.content.action for each response in the responses array.\r\n\r\n**Context**: V2 runtime.ts -> processActions signature and looping. V1 runtime.ts -> processActions logic.\r\n\r\n#### Task 9: V1 Action Lookup and Execution\r\n\r\n**Explanation**: V1 looked up the action in this.actions using fuzzy matching (checking name and similes) and called its handler.\r\n\r\n**Action**: Inside the loop (Task 8):\r\n\r\n- Get the actionName string from response.content.action.\r\n- Normalize actionName (lowercase, remove underscore).\r\n- Find the matching V1 Action object in this.actions:\r\n  - Check a.name (normalized) includes actionName or vice-versa.\r\n  - If no match, check a.similes (normalized) includes actionName or vice-versa.\r\n- If an action is found:\r\n  - Translate the current V1 message and state if necessary (though they are already V1 types in this context).\r\n  - Create the V1 HandlerCallback function (this function needs to take V1 Content, translate it to V2 Content, call the original V2 callback, and translate the resulting V2 Memory[] back to V1 Memory[]).\r\n  - Call `action.handler(this, message, state, {}, v1Callback)`.\r\n  - Handle action.suppressInitialMessage (log a warning, as V2 might not support this directly).\r\n- If no action found, log an error.\r\n\r\n**Context**: V1 runtime.ts -> processActions action lookup and handler call. V1 Action interface.\r\n\r\n### Area: Evaluator Processing (evaluate)\r\n\r\n#### Task 10: Implement V1 Evaluator Validation\r\n\r\n**Explanation**: V1 evaluate first filtered evaluators based on didRespond, alwaysRun, and the validate method.\r\n\r\n**Action**: Inside CompatAgentRuntime.evaluate:\r\n\r\n- Filter this.evaluators:\r\n  - Keep if evaluator.alwaysRun is true.\r\n  - Keep if didRespond is true.\r\n  - For the remaining, call `evaluator.validate(this, message, state)` and keep if it returns true.\r\n- Store the filtered list (validEvaluators).\r\n\r\n**Context**: V1 runtime.ts -> evaluate validation logic. V1 Evaluator interface.\r\n\r\n#### Task 11: Implement V1 LLM-based Evaluator Selection\r\n\r\n**Explanation**: V1 evaluate used an LLM call with a specific template (evaluationTemplate) to select which of the valid evaluators should actually run.\r\n\r\n**Action**: Inside CompatAgentRuntime.evaluate:\r\n\r\n- If validEvaluators is not empty:\r\n  - Import/adapt V1 evaluationTemplate and formatting helpers (formatEvaluators, formatEvaluatorNames, formatEvaluatorExamples) into core-plugin-v1.\r\n  - Format the validEvaluators using the helpers.\r\n  - Construct the prompt using evaluationTemplate, the formatted evaluators, and the current state.\r\n  - Call `this.generateText(...)` with the prompt and ModelClass.SMALL.\r\n  - Import/adapt V1 parseJsonArrayFromText and parse the LLM response to get an array of selected evaluator names.\r\n  - Filter validEvaluators again to get the final list of selectedEvaluators based on the names returned by the LLM.\r\n\r\n**Context**: V1 runtime.ts -> evaluate LLM call logic. V1 evaluators.ts -> template and helpers. V1 parsing.ts -> parseJsonArrayFromText.\r\n\r\n#### Task 12: Execute Selected V1 Evaluators\r\n\r\n**Explanation**: V1 evaluate called the handler for each evaluator selected by the LLM.\r\n\r\n**Action**: Inside CompatAgentRuntime.evaluate:\r\n\r\n- Iterate through the selectedEvaluators (from Task 11).\r\n- For each evaluator, call `evaluator.handler(this, message, state, {}, v1Callback)`.\r\n- Return the array of selected evaluator names (as V1 did).\r\n\r\n**Context**: V1 runtime.ts -> evaluate handler call. V1 Evaluator interface.\r\n\r\n### Area: Registration Methods\r\n\r\n#### Task 13: Implement registerContextProvider\r\n\r\n**Explanation**: V1 runtime had this method to register providers.\r\n\r\n**Action**: Implement CompatAgentRuntime.registerContextProvider. It should simply push the provided V1 Provider instance onto the this.providers array.\r\n\r\n**Context**: V1 runtime.ts -> registerContextProvider. V1 Provider interface.\r\n\r\n#### Task 14: Implement registerAdapter\r\n\r\n**Explanation**: V1 runtime allowed registering DB adapters. V2 uses a single adapter injected at construction.\r\n\r\n**Action**: Implement CompatAgentRuntime.registerAdapter. Log a warning that V2 uses a single adapter and this registration will be ignored (no-op).\r\n\r\n**Context**: V1 runtime.ts -> registerAdapter.\r\n\r\n### Area: Runtime Lifecycle & Plugin Handling\r\n\r\n#### Task 15: Enhance V1 Plugin Loading in Constructor\r\n\r\n**Explanation**: The constructor needs to handle the full V1 Plugin structure, including initializing services and starting clients.\r\n\r\n**Action**: In CompatAgentRuntime constructor:\r\n\r\n- Iterate through opts.plugins (V1 Plugin[]).\r\n- For each plugin:\r\n  - Register actions, evaluators, providers using this.registerAction, this.registerEvaluator, this.registerContextProvider.\r\n  - For plugin.services (V1 Service instances): Call `this.registerService(serviceInstance)`. Note: V1 registerService takes an instance, while V2 takes a class. The compat layer's registerService needs to handle the V1 instance correctly (store it, call its initialize).\r\n  - For plugin.clients (V1 Client definitions): Call `client.start(this)` and store the returned ClientInstance in this.clients.\r\n  - For plugin.adapters: Call `adapter.init(this)`. Decide if storing/using these V1 adapters is necessary or if the main proxied adapter is sufficient (likely the latter). Log a warning if ignoring.\r\n  - Handle plugin.handlePostCharacterLoaded if present (requires careful thought on when/how to call this in the V2 lifecycle).\r\n\r\n**Context**: V1 types.ts -> Plugin, Service, Client, Adapter. V1 runtime.ts constructor/initialization logic.\r\n\r\n#### Task 16: Implement stop Method\r\n\r\n**Explanation**: V2 runtime has stop, V1 did not explicitly. The compat layer should provide a reasonable implementation.\r\n\r\n**Action**: Implement CompatAgentRuntime.stop:\r\n\r\n- Iterate through this.clients (V1 ClientInstance[] stored in Task 15) and call `client.stop(this)`.\r\n- Iterate through this.services (V1 Service instances stored via registerService). Check if service.stop exists (it's not standard in V1 Service) and call it if it does.\r\n- Call `this._v2Runtime.stop()`.\r\n\r\n**Context**: V2 IAgentRuntime.stop. V1 ClientInstance type.\r\n\r\n#### Task 17: Review initialize Order and Logic\r\n\r\n**Explanation**: Ensure the sequence of initialization steps (DB, V1 services, V2 knowledge, V1 knowledge simulation) is correct and doesn't lead to race conditions or missing dependencies.\r\n\r\n**Action**: Review the CompatAgentRuntime.initialize method:\r\n\r\n- Confirm `this.initializeDatabase()` correctly uses the proxied adapter methods (ensureRoomExists, ensureUserExists, ensureParticipantExists).\r\n- Ensure V1 services registered via plugins (Task 15) have their `initialize(this)` method called correctly.\r\n- Verify that V1 knowledge processing (simulated via RAG proxy or knowledge.set mapping) happens after necessary V2 setup but doesn't conflict with V2's own knowledge handling.\r\n\r\n**Context**: V1 runtime.ts -> initialize. CompatAgentRuntime.initialize.\r\n", "OPEN", 0, "0xbbjoker", "2025-04-09T16:01:07Z", "2025-04-09T23:37:45Z", null, null, "elizaos/eliza", "7cba633cdd6f2b3b45000683b24722a36b45c7be", "6cbee5c4f9b37951f0260f112ae24f65e0e7e4a6", 2722, 227, 12, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R98mt", 4243, "fix knowledge types", "<!-- Use this template by filling in information and copying and pasting relevant items out of the HTML comments. -->\r\n\r\n# Relates to\r\nWhen adding rag knowledge, the editor reports an error\r\n\r\n<!-- LINK TO ISSUE OR TICKET -->\r\n\r\n<!-- This risks section must be filled out before the final review and merge. -->\r\n\r\n# Risks\r\n\r\n<!--\r\nLow, medium, large. List what kind of risks and what could be affected.\r\n-->\r\nlow\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\nFix type errors\r\n\r\n## What kind of change is this?\r\n\r\n<!--\r\nBug fixes (non-breaking change which fixes an issue)\r\nImprovements (misc. changes to existing features)\r\nFeatures (non-breaking change which adds functionality)\r\nUpdates (new versions of included code)\r\n-->\r\nBug fixes \r\n<!-- This \"Why\" section is most relevant if there are no linked issues explaining why. If there is a related issue, it might make sense to skip this why section. -->\r\n<!--\r\n## Why are we doing this? Any context or related work?\r\n-->\r\n\r\n# Documentation changes needed?\r\n\r\n<!--\r\nMy changes do not require a change to the project documentation.\r\nMy changes require a change to the project documentation.\r\nIf documentation change is needed: I have updated the documentation accordingly.\r\n-->\r\nMy changes do not require a change to the project documentation.\r\n<!-- Please show how you tested the PR. This will really help if the PR needs to be retested and probably help the PR get merged quicker. -->\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\n## Detailed testing steps\r\n\r\n<!--\r\nNone: Automated tests are acceptable.\r\n-->\r\n\r\n<!--\r\n- As [anon/admin], go to [link]\r\n\u00a0 - [do action]\r\n\u00a0 - verify [result]\r\n-->\r\n\r\n<!-- If there is a UI change, please include before and after screenshots or videos. This will speed up PRs being merged. It is extra nice to annotate screenshots with arrows or boxes pointing out the differences. -->\r\n<!--\r\n## Screenshots\r\n### Before\r\n### After\r\n-->\r\n\r\n<!-- If there is anything about the deployment, please make a note. -->\r\n<!--\r\n# Deploy Notes\r\n-->\r\n\r\n<!-- \u00a0Copy and paste command line output. -->\r\n<!--\r\n## Database changes\r\n-->\r\n\r\n<!-- \u00a0Please specify deploy instructions if there is something more than the automated steps. -->\r\n<!--\r\n## Deployment instructions\r\n-->\r\n\r\n<!-- If you are on Discord, please join https://discord.gg/elizaOS and state your Discord username here for the contributor role and join us in #development-feed -->\r\n<!--\r\n## Discord username\r\n\r\n-->\r\n", "OPEN", 0, "piperTang", "2025-04-09T15:31:08Z", "2025-04-09T15:31:18Z", null, null, "elizaos/eliza", "cbc0b477ed183c4fa47732c925cd7022e832ea92", "773b55d1c4c8ebcc2757ef9bf826218d78eb1e8d", 1, 1, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R9zam", 4242, "Fix GitHub Authentication Prompt During Start CLI Command", "**Issue:**\r\n\r\nUsers were unexpectedly prompted for GitHub authentication during normal CLI operations like elizaos start, while the same command run through npx elizaos start did not require authentication. This inconsistency created a confusing user experience and unnecessary friction.\r\n\r\n**Root Cause:**\r\n\r\nThe CLI was using GitHub-authenticated API calls for routine operations like looking up plugin metadata and registry indexes, even when these operations could be performed without authentication. Specifically:\r\nThe plugin installation process (installPlugin) was using getPluginMetadata() which required GitHub authentication\r\nThe registry lookup functions were defaulting to authenticated GitHub API endpoints. When installing plugins, the CLI was *sometimes* preferring authentication-required methods over authentication-free alternatives, specifically when the plugin installation failed for some reason, it would fallback to something that requires gh auth.\r\n\r\n**Solution:**\r\n\r\nI implemented several key changes to eliminate the need for GitHub authentication during normal CLI usage while preserving it for operations that genuinely require it (like publishing):\r\n\r\n- Created a new getLocalRegistryIndex() function that retrieves registry data through authentication-free methods:\r\n   -First tries fetching from the public GitHub raw URL\r\n   -Falls back to using a local cache file\r\n   -Finally defaults to built-in registry data as a last resort\r\n\r\n- Modified getPluginRepository() to exclusively use the new non-authenticated method, eliminating its dependency on getPluginMetadata()\r\n- Updated getPluginVersion() to skip metadata lookup entirely and use non-authenticated getPackageDetails() or simply return the requested version\r\n\r\nEnhanced the plugin installation process in executeInstallation() to:\r\n\r\n- Prioritize npm registry installations which don't require GitHub auth\r\n- Fall back to GitHub shorthand syntax (github:org/repo) which doesn't require authentication\r\n- Preserve scoped package names during npm installation attempts\r\n\r\nThese changes should ensure that users will never be prompted for GitHub authentication during routine operations like elizaos start or automatic plugin installation, while maintaining the ability to authenticate when needed for publishing or registry management commands.", "MERGED", 1, "yungalgo", "2025-04-09T15:14:36Z", "2025-04-09T16:33:03Z", "2025-04-09T16:33:01Z", "2025-04-09T16:33:01Z", "elizaos/eliza", "18c1c252ca6e34fcfc08b0dd6875b733692a2843", "eae3144b45a7bb5c7c9e8aa3ea1927e31ab731ad", 80, 43, 3, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R7tj_", 4240, "chore: cli cleanup-2", "", "MERGED", 1, "wtfsayo", "2025-04-09T11:33:09Z", "2025-04-09T11:33:18Z", "2025-04-09T11:33:16Z", "2025-04-09T11:33:16Z", "elizaos/eliza", "2a4dc873868bbf0bf48839744d80a3a3f3f55e32", "093f6682e97a26cae98e719e9e7ce9f3843f2dae", 162, 109, 9, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R6b63", 4239, "chore: cli clean ups", "", "MERGED", 1, "wtfsayo", "2025-04-09T09:22:50Z", "2025-04-09T09:36:35Z", "2025-04-09T09:36:33Z", "2025-04-09T09:36:33Z", "elizaos/eliza", "1450c6f90f6991a941983c22412aa55f3960c386", "cbe24196eeec5cd25bb7a536ec056909a705fd1a", 235, 125, 13, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R5FZt", 4237, "fix: gui tts", "This PR resolves the issue where TTS was not functioning properly in the GUI", "MERGED", 1, "tcm390", "2025-04-09T06:57:18Z", "2025-04-09T07:06:32Z", "2025-04-09T07:06:31Z", "2025-04-09T07:06:31Z", "elizaos/eliza", "bc21f8397756deb5706d5921c27d0ed7a903a437", "9823a9520eec634d6c0d3f927a772d607df08c74", 9, 1, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R4ypp", 4236, "fix: transcription", "This PR addresses an issue where transcription was no longer working in both the Discord and GUI. The issue appears to have been introduced in [#4169](https://github.com/elizaOS/eliza/pull/4169), which switched to using NodeFormData. Unfortunately, that change seems to have broken the transcription feature, as the API returned a 400 Bad Request.\r\n\r\nTo resolve this, I\u2019ve reverted to using the form-data package along with node-fetch. I\u2019ve tested this update, and transcription now works as expected in both Discord and the GUI.", "MERGED", 1, "tcm390", "2025-04-09T06:26:17Z", "2025-04-09T07:07:10Z", "2025-04-09T07:07:09Z", "2025-04-09T07:07:09Z", "elizaos/eliza", "08aec5f5d9a7f24c2d663b3a1e7cdc398b96c647", "6e876aa6f054965d23271a0a9ba1f01739e0434c", 16, 4, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R22B5", 4235, "Semantic splitText", "\r\n# Relates to\r\n\r\nImproving\u00a0RAG knowledge retrieval quality\r\n\r\n# Risks\r\n\r\nLow - Changes\u00a0how text is chunked for\u00a0embeddings but maintains size constraints with\u00a0small flexibility.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nReplaces character-based chunking with semantic\u00a0chunking that:\r\n\r\n- Preserves\u00a0paragraphs and sentences as complete units\r\n\r\n- Prevents\u00a0fragmentation of URLs and technical content\r\n\r\n- Adds\u00a0smart boundary detection for improved context preservation\r\n\r\n- Allows\u00a0slight size flexibility (up to 1.5x) to maintain semantic integrity\r\n\r\n## What kind of change is this?\r\n\r\nImprovement\u00a0(enhancement to existing features)\r\n\r\n# Documentation changes needed?\r\n\r\nMy\u00a0changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer\u00a0start?\r\n\r\nReview the\u00a0splitText\u00a0function in\u00a0packages/core/src/generation.ts\r\n\r\n## Detailed testing steps\r\n\r\n- Test searching for content containing URLs or technical references\r\n\r\n- Verify chunks maintain complete\u00a0sentences/paragraphs where\u00a0possible\r\n\r\n- Check that oversized chunks only\u00a0occur when preserving important content\r\n\r\n- Compare\u00a0search quality before/after with queries\u00a0targeting content that previously returned fragmentary results", "OPEN", 0, "ngmachado", "2025-04-08T22:36:57Z", "2025-04-08T22:37:52Z", null, null, "elizaos/eliza", "01ce958b2ac2cf975f3774d62cbee90447f67cce", "9c1f0a9fb6125f3b7809e87595ca741c17d5c608", 84, 9, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R2cZx", 4233, "chore: video understanding plugin tests ", "<!-- Use this template by filling in information and copying and pasting relevant items out of the HTML comments. -->\r\n\r\n# Relates to\r\n\r\n<!-- LINK TO ISSUE OR TICKET -->\r\n\r\n<!-- This risks section must be filled out before the final review and merge. -->\r\n\r\n# Risks\r\n\r\n<!--\r\nLow, medium, large. List what kind of risks and what could be affected.\r\n-->\r\nLow: adding test coverage \r\n# Background\r\n\r\n## What does this PR do?\r\nTest coverage for plugin-video-understanding package\r\n* Added vitest configuration file\r\n* Created three test suites covering all main components:\r\n    * types.test.ts: Tests for Zod schema validation with 6 test cases\r\n    * plugin.test.ts: Tests for plugin export and configuration with 6 test cases\r\n    * video.test.ts: Tests for VideoService with 15 test cases\r\nSpecific coverage:\r\n* Types: Tested FileLocationResultSchema validation for valid/invalid inputs and isFileLocationResult type guard\r\n* Plugin: Tested name, description, service registration, and exports\r\n* VideoService: Tested lifecycle methods (start/stop), URL detection, caching, and media processing\r\n\r\n## What kind of change is this?\r\n\r\n<!--\r\nBug fixes (non-breaking change which fixes an issue)\r\nImprovements (misc. changes to existing features)\r\nFeatures (non-breaking change which adds functionality)\r\nUpdates (new versions of included code)\r\n-->\r\nfeautre/chore: adding tests\r\n<!-- This \"Why\" section is most relevant if there are no linked issues explaining why. If there is a related issue, it might make sense to skip this why section. -->\r\n<!--\r\n## Why are we doing this? Any context or related work?\r\n-->\r\n\r\n# Documentation changes needed?\r\nnpne\r\n<!--\r\nMy changes do not require a change to the project documentation.\r\nMy changes require a change to the project documentation.\r\nIf documentation change is needed: I have updated the documentation accordingly.\r\n-->\r\n\r\n<!-- Please show how you tested the PR. This will really help if the PR needs to be retested and probably help the PR get merged quicker. -->\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\npackages/plugin-video-understanding\r\n## Detailed testing steps\r\n\r\n<!--\r\nNone: Automated tests are acceptable.\r\n-->\r\n\r\n<!--\r\n- As [anon/admin], go to [link]\r\n\u00a0 - [do action]\r\n\u00a0 - verify [result]\r\n-->\r\ncd packages/plugin-video-understanding && pnpm install && pnpm test \r\n<!-- If there is a UI change, please include before and after screenshots or videos. This will speed up PRs being merged. It is extra nice to annotate screenshots with arrows or boxes pointing out the differences. -->\r\n<!--\r\n## Screenshots\r\n### Before\r\n### After\r\n-->\r\n\r\n<!-- If there is anything about the deployment, please make a note. -->\r\n<!--\r\n# Deploy Notes\r\n-->\r\n\r\n<!-- \u00a0Copy and paste command line output. -->\r\n<!--\r\n## Database changes\r\n-->\r\n\r\n<!-- \u00a0Please specify deploy instructions if there is something more than the automated steps. -->\r\n<!--\r\n## Deployment instructions\r\n-->\r\n\r\n<!-- If you are on Discord, please join https://discord.gg/elizaOS and state your Discord username here for the contributor role and join us in #development-feed -->\r\n<!--\r\n## Discord username\r\n\r\n-->\r\n", "OPEN", 0, "ai16z-demirix", "2025-04-08T21:21:10Z", "2025-04-09T20:15:25Z", null, null, "elizaos/eliza", "f0a19ae031a163eb8e9a6ab224104a1f8c73c431", "9aaac11ade4582fba668f52fa0680baff2b5c609", 462, 3, 5, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R1jEI", 4232, "resolved hapi shot error.", "can build an run eliza chatbot only\r\n\r\n<!-- Use this template by filling in information and copying and pasting relevant items out of the HTML comments. -->\r\n\r\n# Relates to\r\n\r\n<!-- LINK TO ISSUE OR TICKET -->\r\n\r\n<!-- This risks section must be filled out before the final review and merge. -->\r\n\r\n# Risks\r\n\r\n<!--\r\nLow, medium, large. List what kind of risks and what could be affected.\r\n-->\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\n## What kind of change is this?\r\n\r\n<!--\r\nBug fixes (non-breaking change which fixes an issue)\r\nImprovements (misc. changes to existing features)\r\nFeatures (non-breaking change which adds functionality)\r\nUpdates (new versions of included code)\r\n-->\r\n\r\n<!-- This \"Why\" section is most relevant if there are no linked issues explaining why. If there is a related issue, it might make sense to skip this why section. -->\r\n<!--\r\n## Why are we doing this? Any context or related work?\r\n-->\r\n\r\n# Documentation changes needed?\r\n\r\n<!--\r\nMy changes do not require a change to the project documentation.\r\nMy changes require a change to the project documentation.\r\nIf documentation change is needed: I have updated the documentation accordingly.\r\n-->\r\n\r\n<!-- Please show how you tested the PR. This will really help if the PR needs to be retested and probably help the PR get merged quicker. -->\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\n## Detailed testing steps\r\n\r\n<!--\r\nNone: Automated tests are acceptable.\r\n-->\r\n\r\n<!--\r\n- As [anon/admin], go to [link]\r\n\u00a0 - [do action]\r\n\u00a0 - verify [result]\r\n-->\r\n\r\n<!-- If there is a UI change, please include before and after screenshots or videos. This will speed up PRs being merged. It is extra nice to annotate screenshots with arrows or boxes pointing out the differences. -->\r\n<!--\r\n## Screenshots\r\n### Before\r\n### After\r\n-->\r\n\r\n<!-- If there is anything about the deployment, please make a note. -->\r\n<!--\r\n# Deploy Notes\r\n-->\r\n\r\n<!-- \u00a0Copy and paste command line output. -->\r\n<!--\r\n## Database changes\r\n-->\r\n\r\n<!-- \u00a0Please specify deploy instructions if there is something more than the automated steps. -->\r\n<!--\r\n## Deployment instructions\r\n-->\r\n\r\n<!-- If you are on Discord, please join https://discord.gg/elizaOS and state your Discord username here for the contributor role and join us in #development-feed -->\r\n<!--\r\n## Discord username\r\n\r\n-->\r\n", "OPEN", 0, "nitzansaar", "2025-04-08T19:00:40Z", "2025-04-08T20:28:14Z", null, null, "elizaos/eliza", "1e5c2c13379920fc3e2e9a7d93d62cd7712a875b", "9c1f0a9fb6125f3b7809e87595ca741c17d5c608", 972, 25, 12, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R1QS8", 4231, "fix: Failed to Replies to Tweet in Interaction", "related: https://github.com/elizaOS/eliza/issues/4226", "MERGED", 1, "tcm390", "2025-04-08T18:20:32Z", "2025-04-08T18:23:11Z", "2025-04-08T18:20:55Z", "2025-04-08T18:20:55Z", "elizaos/eliza", "1d01c1df8bca43d0bbf042af093e71c5d05bea4a", "504bcd6f805a5f8fec315f40d3f9bf0585b06ecd", 15, 13, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R07-A", 4230, "Add OpenAi model usage events", "Add open ai model usage tracking via plugin-scoped events.", "OPEN", 0, "michavie", "2025-04-08T17:45:47Z", "2025-04-08T17:45:58Z", null, null, "elizaos/eliza", "98f8a0999825e621afe8d583cb5de25d57d606fc", "504bcd6f805a5f8fec315f40d3f9bf0585b06ecd", 25, 2, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R06q4", 4229, "Add OpenAi model usage events", "Add open ai model usage tracking via plugin-scoped events.", "CLOSED", 0, "michavie", "2025-04-08T17:42:55Z", "2025-04-08T17:43:07Z", "2025-04-08T17:43:07Z", null, "elizaos/eliza", "0459b07a5943cd50c4f32a635a191b6701183a97", "504bcd6f805a5f8fec315f40d3f9bf0585b06ecd", 40, 20, 5, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R06At", 4228, "fix: Duplicate Provider Section in Prompt", "related: https://github.com/elizaOS/eliza/issues/4225", "MERGED", 1, "tcm390", "2025-04-08T17:41:19Z", "2025-04-08T17:41:43Z", "2025-04-08T17:41:41Z", "2025-04-08T17:41:41Z", "elizaos/eliza", "90bd18140300eb6ec015cb9c654394d31b7177b3", "a46935714cc0ca724360973e73ce2995cb783018", 0, 9, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6R0wyi", 4227, "test adapters", "adapters or I think we should use term data transformers WIP", "OPEN", 0, "0xbbjoker", "2025-04-08T17:23:28Z", "2025-04-08T17:23:36Z", null, null, "elizaos/eliza", "9a46a829704d58de804984a9a5b6f60dc8ee43a4", "391e3de91dd31b4bdc19c29d76443d418e68b3d6", 2846, 0, 5, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RzqaA", 4223, "Fix relationship between entities and agents", "In v2, the concept of `entities` represent an instance of an agent, while an agent itself refers to its `character`.\r\n\r\nThere is a mix up of these concepts happening within `AgentRuntime.initialize()` that currently requires to create a `character` (agent) for each `entity` (instance of agent) \u2013 therefore preventing agent reuse for entities.\r\n\r\n# Risks\r\n\r\nMedium: Downstream an Agent might be incorrectly referenced instead of an entity.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThe invalid guard is removed and entities are changed to correctly reference agents.\r\n\r\n## What kind of change is this?\r\n\r\nBug fixes (non-breaking change which fixes an issue)\r\n\r\n## Why are we doing this? Any context or related work?\r\n\r\nIt is currently not possible to reuse an in-DB `character` (agent) across multiple entities, without duplications in the `agents` table.\r\n\r\nin `AgentRuntime.initialize()` an invalid check by `agentId` is performed and an incorrect reference between `entity` and `agent` is created.\r\n", "OPEN", 0, "michavie", "2025-04-08T15:25:47Z", "2025-04-08T16:45:11Z", null, null, "elizaos/eliza", "c7df5bc35f0894e94e54937af7409fdd6a86314c", "a46935714cc0ca724360973e73ce2995cb783018", 15, 18, 4, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rzp3L", 4222, "Fix anthropic json parse issue", "# Fix Anthropic Plugin JSON Parsing for Responses with Code Blocks\r\n\r\n## Risks\r\n\r\nLow - This PR addresses an edge case in the JSON parsing logic for Anthropic responses containing code blocks. The changes improve the robustness of the existing error handling without changing the API.\r\n\r\n## Background\r\n\r\n### What does this PR do?\r\n\r\nThis PR fixes an issue in the Anthropic plugin where responses containing code blocks with language identifiers (like `bash`) are causing JSON parsing errors. The specific issue occurs when the model returns valid JSON containing markdown code blocks in string values, but the parser fails to handle the content correctly.\r\n\r\n### What kind of change is this?\r\n\r\nBug fix (non-breaking change which fixes an issue)\r\n\r\n### Documentation changes needed?\r\n\r\nNo documentation changes are required as this fixes an internal parsing mechanism.\r\n\r\n## Testing\r\n\r\n### Where should a reviewer start?\r\n\r\nThe reviewer should start by examining the `extractAndParseJSON` function in `packages/plugin-anthropic/src/index.ts` to understand how the JSON parsing has been improved.\r\n\r\n### Detailed testing steps\r\n\r\n1. Test sending messages that would result in responses with code blocks\r\n2. Verify that responses with bash/code blocks are correctly parsed\r\n3. Verify that the error \"Invalid JSON returned from Anthropic model\" no longer occurs for valid responses with code blocks\r\n\r\n## Screenshots\r\n\r\n### Before\r\n\r\nError when receiving a response with code blocks:\r\n\r\n```\r\n[2025-04-08 13:06:47] ERROR: Failed to parse JSON from Anthropic response:\r\n    message: \"(SyntaxError) JSON Parse error: Unexpected identifier \\\"bash\\\"\"\r\n[2025-04-08 13:06:47] ERROR: Raw response: {\r\n    \"thought\": \"I'll help them get started with ElizaOS by providing clear installation instructions from the documentation\",\r\n    \"message\": \"I'll help you get started with ElizaOS! The quickest way is to install the CLI tool globally:\\n\\n1. Install the CLI:\\nbash\\nnpm install -g @elizaos/cli@beta\\n\\n\\n2. Create a new project:\\nbash\\nelizaos create\\n\\n\\n3. Start your project:\\nbash\\ncd your-project\\nelizaos start\\n\\n\\nOnce started, you can visit https://localhost:3000 to interact with your agent through the web interface. Let me know if you need help with any specific part of the setup!\"\r\n}\r\n```\r\n\r\n### After\r\n\r\nThe same response is now correctly parsed without errors, allowing the agent to properly display messages with code blocks.\r\n\r\n<img width=\"493\" alt=\"image\" src=\"https://github.com/user-attachments/assets/3a4ac9e8-38a8-410d-a465-077526a2fd88\" />\r\n\r\n<img width=\"531\" alt=\"image\" src=\"https://github.com/user-attachments/assets/1a8fc76a-d3fa-4b37-82f8-f43af62abe3e\" />\r\n\r\n<img width=\"853\" alt=\"image\" src=\"https://github.com/user-attachments/assets/dd026ddc-56ce-4579-a9a8-f2676c8e6415\" />\r\n\r\n<img width=\"870\" alt=\"image\" src=\"https://github.com/user-attachments/assets/7f33a73c-ecfa-46a5-ae33-9e96e94ffc4c\" />\r\n\r\n## Deploy Notes\r\n\r\nNo special deployment notes required. This is a non-breaking change that fixes a parsing issue in the Anthropic plugin.\r\n", "MERGED", 1, "0xbbjoker", "2025-04-08T15:24:46Z", "2025-04-09T11:58:05Z", "2025-04-09T11:58:05Z", "2025-04-09T11:58:04Z", "elizaos/eliza", "4a2cebd8d9ec2f43d058b7bd9a2b04a46dbb7713", "0784c5c432dafe16a30647b08e43bed70306e05d", 376, 258, 3, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RwJ5p", 4220, "fixed: agent subcommands", "# Relates to\r\n\r\n[ELI2-187 \u2013 CLI: elizaos agent some commands fail or hang](https://linear.app/eliza-labs/issue/ELI2-187/cli-elizaos-agent-some-commands-fail-or-hang)\r\n\r\n# Risks\r\n\r\n**Medium** \u2013 This change touches core CLI behavior for managing agents. Potential risks include:\r\n- Breaking expected behavior for other agent commands.\r\n- Introducing regressions for agent name parsing or subprocess management.\r\n- Hanging or crashing the CLI during agent lifecycle operations.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR fixes an issue where `elizaos agent` subcommands (`stop`, `start`, `remove`, `set`) would hang or silently fail when executed for specific agent names. The root cause was traced to:\r\n- Incorrect parsing/validation of agent names with dashes or special characters.\r\n- Improper handling of subprocess return codes and exceptions.\r\n\r\nThis update:\r\n- Normalizes agent name inputs consistently across subcommands.\r\n- Adds error handling and timeouts to subprocess calls.\r\n- Improves logging for easier debugging of future failures.\r\n\r\n## What kind of change is this?\r\n\r\n- Bug fixes (non-breaking change which fixes an issue)\r\n- Improvements (misc. changes to existing features)\r\n\r\n# Documentation changes needed?\r\n\r\n- \u2705 My changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nStart by reviewing the changes to `cli/agent.py` and the updated subprocess handling logic. Also check new unit tests under `tests/test_cli_agent.py`.\r\n\r\n## Detailed testing steps\r\n\r\n1. Create an agent using UI.\r\n\r\n2. Run the following commands and verify each executes successfully:\r\n   - `elizaos agent stop -n test-agent`\r\n   - `elizaos agent start -n test-agent`\r\n   - `elizaos agent set -n test-agent -f config.json\r\n   - `elizaos agent remove -n test-agent`\r\n\r\n3. Try same commands with malformed or non-existent agent names and confirm appropriate error messages are shown.\r\n\r\n# Output : \r\n![Output](https://github.com/user-attachments/assets/2b04e0f7-8914-4e63-9640-8ae1f9ff05b0)\r\n", "MERGED", 1, "Samarthsinghal28", "2025-04-08T09:09:31Z", "2025-04-09T07:06:37Z", "2025-04-09T07:06:37Z", "2025-04-09T07:06:36Z", "elizaos/eliza", "47a8f00d22b517c4ad3b03051d3870c426fb7b0b", "313fea577218a9dbcff921c4584f427045d05b04", 29, 12, 3, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RvlUz", 4219, "docs: Update README.md for telegram plugin", "Updated the documentation for the the follwoing issue.\r\n\r\nhttps://linear.app/eliza-labs/issue/ELI2-191/ui-bug-talk-to-agent-edit-settings-try-to-talk-to-agent-again-error", "MERGED", 1, "HarshModi2005", "2025-04-08T08:01:41Z", "2025-04-08T09:18:21Z", "2025-04-08T09:18:21Z", "2025-04-08T09:18:21Z", "elizaos/eliza", "daabf628d0e0b46af48ccd34b4c4b5bc544472ae", "9eb0934bd387ac5e0d428e2910915d3664a4ac57", 22, 0, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RvS0J", 4218, "fix: add typescript to dev dep on plugin-starter", "", "MERGED", 1, "wtfsayo", "2025-04-08T07:27:09Z", "2025-04-08T07:28:46Z", "2025-04-08T07:28:45Z", "2025-04-08T07:28:45Z", "elizaos/eliza", "e6d29bf75e9723e699656c587c1cb43449ed031c", "cdc7e4607367e6f0d9dbcd824b6f436c3a08c3fe", 1, 0, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RvSHF", 4217, "fix: small UI fix", "\r\n![image](https://github.com/user-attachments/assets/4dea324b-0a59-4c23-bd21-2444ee79d0f7)\r\n\r\n\r\nhasChanged isn't working correctly. If you change anything and switch tabs, hasChanged gets reset. Also, I don't think we need hasChanged when creating a new agent", "MERGED", 1, "tcm390", "2025-04-08T07:25:49Z", "2025-04-08T07:26:27Z", "2025-04-08T07:26:25Z", "2025-04-08T07:26:25Z", "elizaos/eliza", "f4c16df30bb3c91a6d8c02cfd9e270af31431b35", "6cb5ce8fd0b68dce84b99db8633421c85dcdf619", 17, 12, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RvJjR", 4216, "chore: env loading is already handled + install packages locally", "", "MERGED", 1, "wtfsayo", "2025-04-08T07:10:33Z", "2025-04-08T07:10:44Z", "2025-04-08T07:10:42Z", "2025-04-08T07:10:42Z", "elizaos/eliza", "164b1597f43080c572cbc54fb33e8ecaf35c8d99", "a6b1ad15001996ed7d4d04d1107d13513a570479", 66, 65, 3, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RuSi1", 4214, "Feature/plugin venice", "# Relates to\r\n\r\nI was unable to find a ticket for getting Venice working in v2, but this is a plugin for getting Venice working in v2.\r\n\r\n# Risks\r\n\r\nBasically everything is in `packages/plugin-venice`\r\nThe only thing outside of that was adding plugin-venice to `use-plugins.ts`\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis plugin adds the ability to use Venice AI for inferencing. It still uses OpenAI for embeddings, and will use the `OPENAI_API_KEY` for that, but then uses `VENICE_API_KEY` for text generation.\r\n\r\n## What kind of change is this?\r\n\r\nSort of  a bug fix, since Venice worked in v1, but also the creation of a new plugin, meant to replace `plugin-openai` for characters that want to use Venice.\r\n\r\nI made this because I have a lot of VCUs to burn, and I'm sure others to as well, and it would be nice to use them with Eliza.\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\nTests are included, intended to mirror the tests in `plugin-openai`\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\n## Detailed testing steps\r\nNone: Automated tests are acceptable.\r\n\r\n# Deploy Notes\r\nno notes, everything should be the same\r\n\r\n## Database changes\r\nno changes\r\n\r\n## Deployment instructions\r\nnothing fancy, just add VENICE_API_KEY to global, edit your character, remove `openai-plugin` and add `venice-plugin`, and things should just work. I can provide Venice API keys in DM to anyone who wants to help test.\r\n\r\n## Discord username\r\nI am @deanpierce on the discord, using the handle \"px\"\r\n", "MERGED", 1, "pierce403", "2025-04-08T04:36:33Z", "2025-04-08T05:50:12Z", "2025-04-08T05:50:12Z", "2025-04-08T05:50:12Z", "elizaos/eliza", "75b534afcda0a0019077e0d3cc8eb497d7d82642", "77329ed2d8da9dba610c907ecff3de54706ab0e8", 647, 0, 8, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rt3Cj", 4213, "feat: Improve Reply Action to Use Pre-generated Responses", "## Changes\r\n1. Modified `reply.ts` to use pre-generated responses from the planning stage\r\n   - Now finds all responses with REPLY action and message\r\n   - Uses existing responses instead of generating new ones when available\r\n   - Only calls LLM if no suitable responses are found\r\n\r\n2. Improved `replyTemplate` to be more focused\r\n   - Removed action selection since this is specifically for REPLY", "MERGED", 1, "tcm390", "2025-04-08T02:33:33Z", "2025-04-08T06:10:21Z", "2025-04-08T05:31:46Z", "2025-04-08T05:31:46Z", "elizaos/eliza", "67e473664f246fa9f274b209b7e0f6e59aa2cdd0", "bf8e4d3fdc799b1b9c9929a357a3f67fef5f399d", 27, 7, 3, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rq2Du", 4212, "feat: skip should respond for dm", "This PR skips the shouldRespond check for DM, since the agent can decide to ignore in the second step if needed.", "MERGED", 1, "tcm390", "2025-04-07T17:33:29Z", "2025-04-08T05:34:33Z", "2025-04-08T05:34:32Z", "2025-04-08T05:34:32Z", "elizaos/eliza", "2fac7a5387600958080c418017ec35d39faed229", "d05133ccc3f4d4e2af95b14cf2500fc174375f05", 95, 34, 4, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RqXOo", 4211, "fix: should respond for dm/priv always", "fix: agent should respond for dm/priv always!", "CLOSED", 0, "0xbbjoker", "2025-04-07T16:28:48Z", "2025-04-08T05:59:45Z", "2025-04-08T05:59:45Z", null, "elizaos/eliza", "ce3e03f3d66e6b8e09496533cb9c9892685f51cb", "a6b1ad15001996ed7d4d04d1107d13513a570479", 37, 4, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RpHAh", 4209, "Starting Agent Fix ", "# Relates to\r\n\r\n[ELI2-189: UI Bug - Advanced Agent Creation Fails with TypeError (Same as Basic)](https://linear.app/eliza-labs/issue/ELI2-189/ui-bug-advanced-agent-creation-fails-with-typeerror-same-as-basic)\r\n\r\n# Risks\r\n\r\nLow - This fix addresses a specific issue with agent initialization where default plugins are not being properly included. The changes are focused on ensuring that required plugins are always included during agent initialization, which should not affect other functionality.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR fixes an issue where agent creation fails with a TypeError when using advanced configuration options. The error occurs because the agent is initialized without the required default plugins, specifically the SQL plugin. The fix ensures that the default plugins (`@elizaos/plugin-sql` and `@elizaos/plugin-local-ai`) are always included during agent initialization.\r\n\r\n## What kind of change is this?\r\n\r\nBug fixes (non-breaking change which fixes an issue)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nReview the changes in `packages/cli/src/commands/start.ts` and `packages/core/src/runtime.ts` to understand how the default plugins are now being included during agent initialization.\r\n\r\n## Detailed testing steps\r\n\r\nCreate and start an agent in the UI\r\n", "OPEN", 0, "HarshModi2005", "2025-04-07T14:19:12Z", "2025-04-09T16:13:53Z", null, null, "elizaos/eliza", "01c48b7f882a5191f6bc7e89b46fea0bb031b97d", "2d8cc230c67ecbb23e653e2133bc1fdab9c6fbf4", 42, 1, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Ro9_9", 4208, "chore: update cli readme", "", "MERGED", 1, "wtfsayo", "2025-04-07T14:05:12Z", "2025-04-08T07:17:08Z", "2025-04-08T07:17:06Z", "2025-04-08T07:17:06Z", "elizaos/eliza", "f4d3ffdcfa73b299804bcb78ea9f7ebebd27e2cd", "2d8cc230c67ecbb23e653e2133bc1fdab9c6fbf4", 289, 139, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rnj05", 4207, "fix openai object json parse error", "# Relates to\r\n\r\nBug fix for JSON parsing in OpenAI object generation\r\n\r\n# Risks\r\n\r\nLow - This is a focused fix that improves error handling for JSON parsing in the OpenAI plugin.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR improves the OpenAI plugin by:\r\n\r\n1. Adding support for JSON parse error handling\r\n2. Refactoring the object generation code into a shared helper function\r\n3. Adding a repair function that cleans code fence markers from JSON text\r\n\r\n## What kind of change is this?\r\n\r\nBug fixes (non-breaking change which fixes an issue)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nReview the new helper functions in `packages/plugin-openai/src/index.ts`:\r\n\r\n- `generateObjectByModelType`\r\n- `getJsonRepairFunction`\r\n\r\n## Detailed testing steps\r\n\r\n- Test the `OBJECT_SMALL` and `OBJECT_LARGE` model functions with prompts that include JSON code blocks\r\n- Verify that the JSON parsing error handling correctly removes code fence markers (`json, `)\r\n- Confirm that the error handling properly logs any JSON repair failures\r\n\r\nThe changes maintain the existing functionality while improving error handling for JSON responses that contain code fence markers.\r\n", "MERGED", 1, "avp1598", "2025-04-07T11:44:38Z", "2025-04-08T09:01:58Z", "2025-04-08T09:01:58Z", "2025-04-08T09:01:58Z", "elizaos/eliza", "8d039df03388324af497ef079b5d7aaf0f37525b", "de4d474c79aea60d13185f25f75e7a0225ee4262", 58, 55, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RkHET", 4206, "feat: client -twitter", "using custom client-twitter", "CLOSED", 0, "jinbangyi", "2025-04-07T04:07:38Z", "2025-04-07T04:09:05Z", "2025-04-07T04:09:05Z", null, "elizaos/eliza", "9c52b4cbb07b0a58ebb27cd7fbf65d6d424979c5", "bba487b059b64cb7fd0eb2377200fc486743b4e8", 41542, 438684, 3339, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RjTeK", 4205, "fix: replace fastembed with local embedding model", "# Relates to\r\n\r\nBug fix for embedding model functionality in local-ai plugin\r\n\r\n# Risks\r\n\r\nLow. Only affects users using the local embedding model functionality.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nReplaces the external `fastembed` package with a local embedding model implementation for the local-ai plugin.\r\n\r\n## What kind of change is this?\r\n\r\nBug fixes (non-breaking change which fixes an issue)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\npackages/plugin-local-ai/src/index.ts\r\n\r\n## Detailed testing steps\r\n\r\n- Run the local embedding functionality without `fastembed` dependency\r\n- Verify that embeddings are correctly generated using the local GGUF model\r\n", "MERGED", 1, "0xbbjoker", "2025-04-07T00:07:03Z", "2025-04-07T12:15:31Z", "2025-04-07T12:15:31Z", "2025-04-07T12:15:31Z", "elizaos/eliza", "2bade61b9d8970907dc091859e00d56236a8508a", "de4d474c79aea60d13185f25f75e7a0225ee4262", 439, 284, 7, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Righu", 4204, "chore: externalise fastembed and node-llama-cpp in local-ai", "", "MERGED", 1, "wtfsayo", "2025-04-06T16:44:38Z", "2025-04-06T16:44:51Z", "2025-04-06T16:44:50Z", "2025-04-06T16:44:50Z", "elizaos/eliza", "1e9668e16f2f51649c2c81cce4162dfea2a1d047", "4175c737436302188e5972030f2a698bd6fb9f71", 802, 53, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rid-U", 4203, "chore: remove remaining ollama references in local-ai plugin", "", "MERGED", 1, "wtfsayo", "2025-04-06T16:18:30Z", "2025-04-06T16:18:45Z", "2025-04-06T16:18:43Z", "2025-04-06T16:18:43Z", "elizaos/eliza", "47da75d96fdded4bbca0ac17095f7702d2cfd2a1", "df9a518d7e2eff7a24a8c342091fbc84da955466", 12, 144, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RiWR6", 4202, "chore: enhance plugin install strategy and code", "- enhances plugin install logic", "MERGED", 1, "wtfsayo", "2025-04-06T15:03:56Z", "2025-04-06T15:04:51Z", "2025-04-06T15:04:49Z", "2025-04-06T15:04:49Z", "elizaos/eliza", "99dd539707e710d0387730662fc6d93f6d44504a", "82a08c445da559bcabd78eee428a93b3188356ff", 196, 227, 5, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RiUiK", 4201, "Darkened borders and focus states in UI components", "Here's a completed PR template based on the changes you've made:\r\n\r\n# Relates to\r\n\r\nUI Enhancement - Input Field Borders\r\n\r\n# Risks\r\n\r\nLow - This is a minor UI change that only affects styling, not functionality.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nImproves visibility and aesthetics of form elements by:\r\n- Darkening borders from default to gray-600 on input fields, text areas, and select elements\r\n- Enhancing focus states with thicker rings (ring-2) and consistent gray-600 color\r\n- Maintaining consistent styling across all form components\r\n\r\n## What kind of change is this?\r\n\r\nImprovements (visual enhancements to existing UI components)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nTest any forms or inputs in the application to see the darker borders and improved focus states.\r\n\r\n## Detailed testing steps\r\n\r\n- Open any page with form elements\r\n- Compare the border colors before and after (now darker gray-600)\r\n- Focus on inputs to see the thicker focus ring effect\r\n- Verify consistency across all input types: text inputs, text areas, select dropdowns\r\n", "MERGED", 1, "HarshModi2005", "2025-04-06T14:47:18Z", "2025-04-06T23:20:45Z", "2025-04-06T23:20:45Z", "2025-04-06T23:20:45Z", "elizaos/eliza", "161a9dcb2459d904a7ec29e5679476cda264587f", "c3ec68c2a30615caf1477beed8544bcbaf3f5e38", 37, 39, 9, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RiBtU", 4200, "fixed: the docs issue with the add, remove and list plugin issue", "# Relates to\r\n\r\nhttps://linear.app/eliza-labs/issue/ELI2-186/cli-elizaos-plugin-subcommands-not-found-either-docs-wrong-or\r\n\r\n# Risks\r\n\r\n**Low** \u2013 This change only updates the documentation.  \r\nNo runtime or production behavior is affected.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR fixes an incorrect CLI command in the documentation.  \r\nPreviously, the documented `elizaos plugin <subcommand>` command was either outdated or incorrect, resulting in a \"subcommand not found\" error.\r\n\r\nThe documentation has now been updated with the correct usage syntax to prevent confusion for users.\r\n\r\n## What kind of change is this?\r\n\r\n**Improvements** \u2013 documentation fix for existing functionality.\r\n\r\n# Documentation changes needed?\r\n\r\n\u2705 My changes **require** a change to the project documentation.  \r\n\ud83d\udee0\ufe0f I have updated the documentation accordingly.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nCheck the modified section in the documentation where the CLI command usage is shown.\r\n\r\n## Detailed testing steps\r\n\r\n1. Try the previously documented CLI command \u2013 it should fail.\r\n2. Use the corrected command from the updated docs \u2013 it should work as expected.\r\n", "MERGED", 1, "Samarthsinghal28", "2025-04-06T11:42:08Z", "2025-04-06T17:49:33Z", "2025-04-06T17:49:33Z", "2025-04-06T17:49:33Z", "elizaos/eliza", "d25142a6676e05dd6dd9c16bd3981cdfe291ffe2", "c3ec68c2a30615caf1477beed8544bcbaf3f5e38", 6, 5, 3, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rhyy8", 4199, "issue: elizaos port unavailable issue resolved", "# Relates to\r\n\r\nhttps://github.com/elizaOS/eliza/issues/4107\r\n\r\n# Risks\r\n\r\n**Low** \u2013 This PR modifies the behavior for assigning ports when running `npx elizaos start`.  \r\nIt ensures that if the default port is already in use, the tool finds the next available one.  \r\nThis affects local development tooling and should not impact production or runtime services.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nFixes an error occurring when running `npx elizaos start` that says:  \r\n**\"agents already exists\"** \u2013 which is caused by a port conflict when a default port is already occupied.\r\n\r\nThe new behavior now checks for port availability and automatically uses the next available port if the preferred one is taken.\r\n\r\n## What kind of change is this?\r\n\r\n**Bug fix** \u2013 non-breaking change that resolves an issue in the setup flow.\r\n\r\n# Documentation changes needed?\r\n\r\n\u2705 My changes do **not** require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nStart with the changes in the CLI initialization code related to port handling.\r\n\r\n## Detailed testing steps\r\n\r\n1. Ensure another service is running on the default port.\r\n2. Run `npx elizaos create`.\r\n3. Select `create project`\r\n4. Run `cd project_name`\r\n5. Run `npx elizaos start`\r\n6. Verify that:\r\n   - No \"agents already exists\" error is thrown.\r\n   - The system starts up on the next available port.\r\n7. Optionally: kill the other service and re-test to ensure the default port is picked when available.\r\n\r\n![Output](https://github.com/user-attachments/assets/4f5e635f-8605-42db-a27c-2e21ca5f4790)\r\n", "MERGED", 1, "Samarthsinghal28", "2025-04-06T09:05:05Z", "2025-04-06T17:50:55Z", "2025-04-06T17:50:55Z", "2025-04-06T17:50:55Z", "elizaos/eliza", "6cbc10f4db0123b0ac0fe407bf62cc4e5f1d8ca4", "9d431543c015760175eed8a16235574cb7ff017e", 41, 1, 3, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RhMsT", 4198, "fix json parse problem with nested objects", "# Relates to\r\n\r\n[Issue 3779](https://github.com/elizaOS/eliza/issues/3779)\r\n\r\n# Risks\r\n\r\nLow.  The change modifies a regular expression used for JSON normalization.  The primary risk is that the updated regex could inadvertently fail to normalize certain valid JSON strings, or incorrectly normalize previously correct strings. The automated tests and new test cases should mitigate this risk.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR fixes a bug in the `normalizeJsonString` function that caused extra quotation marks to be added to nested JSON objects during normalization. Specifically, the existing regex pattern was incorrectly attempting to wrap the entire nested object in double quotes, resulting in invalid JSON.\r\n\r\n## What kind of change is this?\r\nBug fix\r\n\r\n<!-- This \"Why\" section is most relevant if there are no linked issues explaining why. If there is a related issue, it might make sense to skip this why section. -->\r\n<!--\r\n## Why are we doing this? Any context or related work?\r\nI encountered this bug when trying to parse nested objects from an LLM response. The parsing was failing and using the extractAttributes function. This should fix the issue.\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nThe reviewer should start by examining the changes to the `normalizeJsonString` function, focusing on the updated regular expression. Review the updated test suite to ensure that the existing tests still pass and that the new tests correctly cover the bug fix.\r\n\r\n## Detailed testing steps\r\n\r\n- Examine the code diff, specifically the regular expression modification in the `normalizeJsonString` function.  Verify that the new regex avoids matching nested JSON objects when wrapping unquoted values in double quotes.\r\n- Run the existing test suite to ensure no regressions were introduced.\r\n- Add a new test case that specifically includes a JSON string containing nested objects.  The test case should assert that the `normalizeJsonString` function correctly normalizes the string *without* adding extra quotation marks around the nested object. An example could be:\r\n    ```javascript\r\n    //example\r\n     const testString = '{\"action\": \"callFunction\", \"actionParameters\": {\"a\": \"B\"}}';\r\n     const expectedNormalizedString = '{\"action\": \"callFunction\", \"actionParameters\": {\"a\": \"B\"}}';\r\n     const normalizedString = normalizeJsonString(testString);\r\n     expect(normalizedString).toBe(expectedNormalizedString);\r\n\r\n    ```\r\n- Verify that the new test case passes.", "OPEN", 0, "arandaschimpf", "2025-04-06T00:33:13Z", "2025-04-08T09:36:34Z", null, null, "elizaos/eliza", "24af977f6c9cfaec17c1818920d05ddaa1f009ba", "bba487b059b64cb7fd0eb2377200fc486743b4e8", 2, 2, 1, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RhGP0", 4197, "initial commit for fixing delete character button", "\r\n# Relates to\r\n\r\n[Linear Ticket](https://linear.app/eliza-labs/issue/ELI2-197/ui-fix-non-functional-delete-character-button)\r\n\r\n# Risks\r\n\r\nMedium. This PR modifies agent deletion logic which affects database operations. There's a risk of:\r\n- Database integrity issues if deletion sequence isn't handled correctly\r\n- UI hanging if database operations time out\r\n- Potential orphaned data if deletion is interrupted\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nFixes the non-functional delete character button in the agent settings UI by:\r\n1. Addressing a database foreign key constraint issue that was causing timeouts\r\n2. Improving error handling and feedback in the UI\r\n3. Adding timeouts to prevent the UI from hanging indefinitely\r\n\r\n## What kind of change is this?\r\n\r\nBug fixes (non-breaking change which fixes an issue)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nStart by reviewing the `deleteAgent` method in `packages/plugin-sql/src/base.ts`, which contains the core fix for the database constraint issue, then review the client-side changes in `packages/client/src/components/agent-settings.tsx`.\r\n\r\n## Detailed testing steps\r\n\r\n1. Create a new agent character\r\n2. Navigate to the character settings page\r\n3. Click the \"Delete Character\" button\r\n4. Confirm the deletion in the dialog\r\n5. Verify the UI shows the deletion in progress\r\n6. Verify you are redirected to the home page\r\n7. Verify the character is no longer listed\r\n\r\nAdditionally, try deleting an agent with:\r\n- Active logs/history\r\n- Multiple rooms\r\n- While it's running\r\n\r\n\r\n", "MERGED", 1, "Y4NK33420", "2025-04-05T22:50:12Z", "2025-04-09T15:23:53Z", "2025-04-09T15:23:53Z", "2025-04-09T15:23:53Z", "elizaos/eliza", "b432373146213dd60613afba22642e344541376b", "eae3144b45a7bb5c7c9e8aa3ea1927e31ab731ad", 791, 111, 7, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RdhrX", 4190, "feat: Add 100% instrumentation coverage for Twitter plugin", "# Relates to\r\n<!-- No specific ticket linked -->\r\n\r\n# Risks\r\nLow - This change only affects instrumentation and logging. It doesn't modify the core functionality of the Twitter plugin. The only potential impact would be on logging volume.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\nThis PR adds comprehensive instrumentation to the Twitter plugin, achieving 100% coverage for post client methods. It implements structured logging for all operations related to posting tweets, including creating tweet objects, sending tweets, and processing results.\r\n\r\n## What kind of change is this?\r\nImprovements (enhancing existing instrumentation for better observability and debugging)\r\n\r\n# Documentation changes needed?\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n1. Review the instrumentation added to `packages/plugin-twitter/src/post.ts`\r\n2. Check the test file at `packages/plugin-twitter/__tests__/instrumentation.test.ts`\r\n\r\n## Detailed testing steps\r\n- Run the Twitter plugin instrumentation test to verify all methods are instrumented:\r\n  ```\r\n  cd /path/to/repo\r\n  bun test packages/plugin-twitter/__tests__/instrumentation.test.ts\r\n  ```\r\n- Verify that the test reports 100% instrumentation coverage (4/4 methods)\r\n- The specific methods that were instrumented:\r\n  - postTweet (already instrumented)\r\n  - createTweetObject (newly instrumented)\r\n  - sendStandardTweet (newly instrumented) \r\n  - processAndCacheTweet (newly instrumented)", "OPEN", 0, "Imsharad", "2025-04-04T21:17:12Z", "2025-04-08T08:56:21Z", null, null, "elizaos/eliza", "eef0f2eaeebda2924defa9e2f2c68532709ede56", "0cb5571e7e3639b37f2c24e8ad25b4222436d292", 2252, 101, 15, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rclbf", 4189, "Fix runtime runtime.registerPlugin after initialization", "# Relates to\r\n\r\nN/A\r\n\r\n# Risks\r\n\r\nLow - This change adds initialization status tracking to the AgentRuntime class which should prevent duplicate initialization but involves minimal changes to core functionality.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR fixes a bug where calling registerPlugin after the runtime was initialized would not register the plugin's services, but only queue them. The changes ensure that:\r\n1. Services are properly registered immediately when a plugin is added after initialization\r\n2. Duplicate initialization calls are prevented with appropriate warnings\r\n3. The runtime tracks its initialization state properly\r\n\r\n## What kind of change is this?\r\n\r\nBug fixes (non-breaking change which fixes an issue)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nReview the changes in `packages/core/src/runtime.ts` focusing on the added isInitialized flag and its usage in the initialize() method and plugin registration logic.\r\n\r\n## Detailed testing steps\r\n\r\n- Test adding a plugin before initialization to ensure services are queued properly\r\n- Test adding a plugin after initialization to verify services are registered immediately instead of just being queued\r\n- Test calling initialize() multiple times to confirm the warning is logged and duplicate initialization is prevented\r\n", "MERGED", 1, "hishboy", "2025-04-04T18:29:47Z", "2025-04-07T16:10:47Z", "2025-04-07T16:10:47Z", "2025-04-07T16:10:47Z", "elizaos/eliza", "583e0890947c169ce13eb3c768dcafa0f8148560", "2d8cc230c67ecbb23e653e2133bc1fdab9c6fbf4", 15, 4, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RcWFz", 4188, "chore: reduce chunk size & return only RAG fragments", "# Relates to\r\n\r\nOptimizing RAG knowledge chunking for improved agent responses\r\n\r\n# Risks\r\n\r\nLow - Changes optimize the way knowledge fragments are processed and returned, improving efficiency without introducing major system changes.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\n1. Reduces chunk size for knowledge fragments from 3000 to 1500 tokens to create smaller, more focused data chunks\r\n2. Returns only the relevant RAG fragments instead of the full document\r\n3. Ensures agents like Eddy in the organization won't be cluttered with unnecessary data in their prompts\r\n\r\n## What kind of change is this?\r\n\r\nImprovements (optimization of existing RAG knowledge handling features)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nReview the changes in `packages/core/src/runtime.ts` to verify:\r\n\r\n- The chunk size reduction from 3000 to 1500 tokens\r\n- The streamlined response format returning only relevant fragments\r\n\r\n## Detailed testing steps\r\n\r\n- Test RAG knowledge retrieval with an agent that uses this system\r\n- Verify the agent receives more focused, relevant knowledge fragments\r\n- Confirm that when multiple fragments match a query, only the relevant portions are returned\r\n\r\n# Deploy Notes\r\n\r\nStandard deployment process is sufficient for these changes.\r\n\r\n## Discord username\r\n.0xbbjoker\r\n", "MERGED", 1, "0xbbjoker", "2025-04-04T17:48:20Z", "2025-04-06T16:45:20Z", "2025-04-06T16:45:20Z", "2025-04-06T16:45:20Z", "elizaos/eliza", "8bf009567de14a1a73a0e14cb8345a85dd86c088", "82a08c445da559bcabd78eee428a93b3188356ff", 10, 24, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rb9k4", 4187, "feat: Add message buttons", "# Risks\r\n\r\nLow - The changes are focused on adding button support to the Telegram plugin, which is a non-breaking change. The main risk would be if the button conversion logic has any edge cases not covered by testing.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR adds support for interactive buttons in Telegram messages through the Eliza framework. It introduces a new Button type in the core package and implements the conversion of these buttons to Telegram's inline keyboard format.\r\n\r\n## What kind of change is this?\r\n\r\nFeatures (non-breaking change which adds functionality)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes require a change to the project documentation.\r\nIf documentation change is needed: I have updated the documentation accordingly.\r\n\r\n# Testing\r\n\r\n## Where should a reviewer start?\r\n\r\nThe reviewer should start by examining the new Button type in packages/core/src/types.ts and then look at how it's implemented in the Telegram plugin.\r\n\r\n## Detailed testing steps\r\n\r\n- Test sending a message with login buttons\r\n  - Verify the buttons appear correctly in Telegram\r\n  - Verify the login flow works as expected\r\n- Test sending a message with URL buttons\r\n  - Verify the buttons appear correctly in Telegram\r\n  - Verify clicking the buttons opens the correct URLs\r\n- Test sending messages with no buttons\r\n  - Verify existing functionality remains unchanged\r\n\r\n## Screenshots\r\n\r\n### Before\r\n\r\nCurrently, to send a user a link to a resource or to login, the best you can do is send plain text with a link.\r\n\r\n![image](https://github.com/user-attachments/assets/1449ed43-f76e-4633-87d2-c876420e089c)\r\n\r\n### After\r\n\r\nThis PR implements the ability to send buttons in the message content and manages displaying the buttons in telegram.\r\n\r\n![image](https://github.com/user-attachments/assets/703c371c-d4f3-4be4-997a-f418e3f21a70)\r\n\r\n# Deploy Notes\r\n\r\nNo special deployment notes required. This is a non-breaking change that adds new functionality.", "OPEN", 0, "ncale", "2025-04-04T16:48:48Z", "2025-04-09T17:43:53Z", null, null, "elizaos/eliza", "2f1fdb2989205b1370a26b8775a92efe24ccbecb", "a00a5b0951f53fa77eedb1a27f9600f67fcf7428", 87, 4, 4, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6Rb77V", 4185, "fix: Eli2 134/make npm create eliza and npx elizaos create functionally identical", "# Enhanced Command-Line Handling for create-eliza\r\n\r\nThis PR improves the user experience of the create-eliza CLI tool with comprehensive flag handling and path detection:\r\n\r\n## 1. Robust Flag and Argument Processing\r\n* Properly handles all supported flags: `-d/--dir`, `-t/--type`, and `-y/--yes`\r\n* Ensures flags are correctly passed to the underlying CLI regardless of position\r\n* Preserves flag functionality when using both npm and npx command forms\r\n\r\n## 2. Intelligent Directory Path Detection\r\n* Added smart path detection to recognize various directory path formats\r\n* Now correctly handles directory names with or without path separators\r\n* Supports multiple command syntax patterns:\r\n * Standard flag usage: `npm create eliza -d ./my-dir`\r\n * Auto-detected paths: `npm create eliza ./my-dir` or `npm create eliza my-project-dir`\r\n * Combined with type: `npm create eliza plugin ./plugins-dir/my-plugin`\r\n\r\n## 3. Consistent Help Command Experience\r\n* Added a dedicated help command that works with npm: `npm create eliza help`\r\n* Help output matches exactly what users see with `npx elizaos create --help`\r\n* Welcome message only appears when creating projects, not when viewing help\r\n\r\nThese changes standardize the CLI experience across npm and npx command forms, making it more intuitive and aligned with user expectations. Any command that works with `npx elizaos create` now works consistently with `npm create eliza`, providing a seamless developer experience.", "MERGED", 1, "yungalgo", "2025-04-04T16:44:18Z", "2025-04-08T09:48:44Z", "2025-04-08T09:48:42Z", "2025-04-08T09:48:42Z", "elizaos/eliza", "a635004e8ff0077094b27f1164e8931e7047e4bc", "9eb0934bd387ac5e0d428e2910915d3664a4ac57", 213, 9, 2, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6RTkjF", 4173, "feat: Test Coverage for plugin-bootstrap", "# Relates to\r\n\r\nEliza Bootstrap Plugin Test Suite Enhancement - Comprehensive Test Coverage\r\n\r\n# Risks\r\n\r\nLow. This PR focuses exclusively on test infrastructure improvements without changing production code.\r\n\r\n# Background\r\n\r\n## What does this PR do?\r\n\r\nThis PR delivers a robust and comprehensive test suite for the Bootstrap Plugin with complete coverage across all plugin components and behaviors.\r\n\r\n## What kind of change is this?\r\n\r\nImprovements (enhanced test coverage and infrastructure)\r\n\r\n# Documentation changes needed?\r\n\r\nMy changes do not require a change to the project documentation.\r\n\r\n# Testing\r\n\r\n## Test Files Overview\r\n\r\nThe test suite consists of 6 main test files and 1 test utilities file:\r\n\r\n### 1. `test-utils.ts` (424 lines)\r\n- Core mock factory functions and type definitions\r\n- Comprehensive runtime interface implementation\r\n- Standardized test object creation\r\n\r\n### 2. `actions.test.ts` (1443 lines)\r\n- 30 tests covering all action components\r\n- Test categories:\r\n  - Reply action tests\r\n  - Ignore action tests\r\n  - Follow/Unfollow room action tests\r\n  - Mute/Unmute room action tests\r\n  - Choice action tests\r\n  - Send message action tests\r\n  - Role update action tests\r\n  - Settings update action tests\r\n\r\n### 3. `evaluators.test.ts` (517 lines)\r\n- 7 tests covering reflection evaluator functionality\r\n- Test categories:\r\n  - Model prompt composition tests\r\n  - Fact extraction tests\r\n  - Relationship creation tests\r\n  - Error handling tests\r\n  - Caching and frequency tests\r\n\r\n### 4. `logic.test.ts` (535 lines)\r\n- 15 tests covering event handling and message processing\r\n- Test categories:\r\n  - Message handler tests\r\n  - Reaction handler tests\r\n  - Entity event tests (joined/left)\r\n  - Action lifecycle tests\r\n  - Evaluator lifecycle tests\r\n  - Error handling tests\r\n\r\n### 5. `plugin.test.ts` (339 lines)\r\n- 14 tests covering plugin structure and initialization\r\n- Test categories:\r\n  - Component registration tests\r\n  - Event handler tests\r\n  - Plugin structure verification tests\r\n  - Initialization sequence tests\r\n\r\n### 6. `providers.test.ts` (576 lines)\r\n- 20 tests covering provider implementations\r\n- Test categories:\r\n  - Choice provider tests\r\n  - Facts provider tests\r\n  - Providers provider tests\r\n  - Recent messages provider tests\r\n  - Role provider tests\r\n  - Settings provider tests\r\n\r\n### 7. `services.test.ts` (733 lines)\r\n- 23 tests covering service functionality\r\n- Test categories:\r\n  - Task service tests\r\n  - Scenario service tests\r\n  - Service registry tests\r\n  - File service tests\r\n  - PDF service tests\r\n  - Image service tests\r\n\r\n## Detailed Running Steps\r\n\r\n### Step 1: Install Dependencies\r\n```bash\r\ncd /Users/harshmodi/Desktop/newRepo/eliza\r\nnpm install\r\n```\r\n\r\n### Step 2: Run Individual Test Files\r\n\r\n#### Run Action Tests\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__/actions.test.ts\r\n\r\n\r\n\r\n#### Run Evaluator Tests\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__/evaluators.test.ts\r\n```\r\n\r\n\r\n#### Run Logic Tests\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__/logic.test.ts\r\n```\r\n\r\n\r\n#### Run Plugin Tests\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__/plugin.test.ts\r\n```\r\n\r\n\r\n#### Run Provider Tests\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__/providers.test.ts\r\n```\r\n\r\n\r\n#### Run Service Tests\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__/services.test.ts\r\n```\r\n\r\n\r\n### Step 3: Run All Tests\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__\r\n```\r\n\r\n\r\n### Step 4: Run Tests with Coverage\r\n```bash\r\nnpx vitest run packages/plugin-bootstrap/__tests__ --coverage\r\n```\r\n\r\n\r\n### Step 5: Run Tests in Watch Mode (during development)\r\n```bash\r\nnpx vitest watch packages/plugin-bootstrap/__tests__\r\n```\r\n\r\n\r\n\r\nThis test suite forms a robust foundation for ongoing plugin development with high confidence in code quality and behavior.\r\n\r\n\r\nI have not registered the test command yet as I don\u2019t know the requirements of this test suite. I\u2019ll do the needful based on the instructions\r\n", "MERGED", 1, "HarshModi2005", "2025-04-03T19:08:50Z", "2025-04-06T19:33:07Z", "2025-04-05T19:12:35Z", "2025-04-05T19:12:35Z", "elizaos/eliza", "c382baa3251b80173d6b70884ffab67399a98cf0", "8839d0aba93563e5de6f4a04a594d705d1c48a0d", 12160, 25, 16, "2025-04-10 03:05:23"]
["PR_kwDOMT5cIs6KNhZR", 3296, "feat: add new plugin for Bonsai", "<!-- Use this template by filling in information and copying and pasting relevant items out of the HTML comments. -->\r\n\r\n# Risks\r\n\r\nLow\r\n- introducing a new plugin, only added to agent plugins if the correct env variables are present\r\n- changes to `client-lens` and `client-farcaster` are non-breaking, mostly additions\r\n\r\n# Background\r\n\r\nThis PR adds a new plugin `plugin-bonsai`: An ElizaOS plugin that enables agents to create tokens, promote them, and provide analysis. More info is available on the docs: https://docs.bonsai.meme/elizaos/plugin-bonsai\r\n\r\n## What kind of change is this?\r\n- Features: new plugin `plugin-bonsai`\r\n- Updates: changes to clients `client-lens` and `client-farcaster` for more flexible prompts, types, exposing post functions \r\n\r\n## Why are we doing this? Any context or related work?\r\nThe plugin is the first step towards enabling agentic memecoins\r\n\r\n# Testing\r\n1. Set the ENV variables\r\n```\r\nEVM_PRIVATE_KEY=\r\nBASE_RPC_URL=\r\nSUBGRAPH_API_KEY=\r\n```\r\n\r\n2. You will see the bonsai plugin initialized in the terminal logs\r\n4. Send a message to the agent like \"create a token on the launchpad $DOG for the dog in me\" or tag the agent on lens/fc in a post with your prompt\r\n5. See the appropriate action taken (if you want to create a token, make sure the wallet has some Base ETH)\r\n\r\n## Where should a reviewer start?\r\nSee above\r\nSee our agent who's been live with these changes: https://hey.xyz/u/bons_ai\r\n\r\n## Detailed testing steps\r\nSee above\r\n\r\n## Discord username\r\n`imthatcarlos`\r\n", "CLOSED", 0, "imthatcarlos", "2025-02-06T01:06:40Z", "2025-04-06T01:50:17Z", "2025-02-06T23:26:58Z", null, "elizaos/eliza", "00a9bf51ebafde00efb86ac026552c803d73c321", "2dbf2cc09f84c73b0c7d6c3f296263d001b7cf2f", 3373, 52, 29, "2025-04-10 03:05:23"]
