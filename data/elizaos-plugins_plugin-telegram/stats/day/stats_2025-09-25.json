{
  "interval": {
    "intervalStart": "2025-09-25T00:00:00.000Z",
    "intervalEnd": "2025-09-26T00:00:00.000Z",
    "intervalType": "day"
  },
  "repository": "elizaos-plugins/plugin-telegram",
  "overview": "From 2025-09-25 to 2025-09-26, elizaos-plugins/plugin-telegram had 1 new PRs (0 merged), 1 new issues, and 1 active contributors.",
  "topIssues": [
    {
      "id": "I_kwDOOtl_Us7Ny7p3",
      "title": "Support inline keyboard callback buttons alongside existing URL/Login buttons.",
      "author": "o-ray-o",
      "number": 14,
      "repository": "elizaos-plugins/plugin-telegram",
      "body": "In https://docs.elizaos.ai/plugin-registry/platform/telegram/complete-documentation , there is this portion that covers inline keyboards and how to utilise plugin-telegram to create them. \n\n```// Simple button layout\nconst keyboard = {\n  inline_keyboard: [[\n    { text: \"Option 1\", callback_data: \"opt_1\" },\n    { text: \"Option 2\", callback_data: \"opt_2\" }\n  ], [\n    { text: \"Cancel\", callback_data: \"cancel\" }\n  ]]\n};\n```\n\nHowever, going through https://github.com/elizaos-plugins/plugin-telegram/blob/1.x/src/utils.ts\nreveals \n```\n/**\n * Converts Eliza buttons into Telegram buttons\n * @param {Button[]} buttons - The buttons from Eliza content\n * @returns {InlineKeyboardButton[]} Array of Telegram buttons\n */\nexport function convertToTelegramButtons(buttons?: Button[] | null): InlineKeyboardButton[] {\n  if (!buttons) return [];\n  return buttons.map((button: Button) => {\n    switch (button.kind) {\n      case 'login':\n        return Markup.button.login(button.text, button.url);\n      case 'url':\n        return Markup.button.url(button.text, button.url);\n    }\n  });\n}\n```\nwhich means that the functionality in the documentation was not actually implemented \n",
      "createdAt": "2025-09-25T09:01:57Z",
      "closedAt": null,
      "state": "OPEN",
      "commentCount": 0
    }
  ],
  "topPRs": [
    {
      "id": "PR_kwDOOtl_Us6qeLty",
      "title": "feat(telegram): add inline callback buttons to utils and types; docs+‚Ä¶",
      "author": "o-ray-o",
      "number": 15,
      "body": "# Add Callback Button Support for Interactive Menus\r\n\r\n## Summary\r\nThis PR adds support for Telegram callback buttons, enabling interactive menus that update in place without message spam. This feature allows developers to create rich, interactive experiences with navigation flows, confirmation dialogs, and dynamic content updates.\r\n\r\n## Motivation\r\nPreviously, the plugin only supported URL and login buttons which open external links. There was no way to create interactive menus or handle button clicks within the chat itself. This limitation prevented developers from building engaging bot experiences with:\r\n- Multi-level menus\r\n- Confirmation dialogs  \r\n- Settings panels\r\n- Interactive forms\r\n\r\n## Changes\r\n\r\n### 1. Type System Updates\r\n- **Extended `Button` type** (`src/types.ts`): Added discriminated union variant for callback buttons with `kind: 'callback'` and `callback_data` field\r\n- **Enhanced `TelegramContent` interface**: Added optional `callback_data` field to track button press data\r\n\r\n### 2. Core Functionality\r\n- **Button Conversion** (`src/utils.ts`): Updated `convertToTelegramButtons()` to handle callback buttons using `Markup.button.callback()`\r\n- **Callback Query Handler** (`src/messageManager.ts`): Implemented `handleCallbackQuery()` method that:\r\n  - Acknowledges callback queries immediately for better UX\r\n  - Processes callback data as messages through the runtime\r\n  - Supports editing original messages in place\r\n  - Creates proper Memory objects for action processing\r\n\r\n### 3. Service Integration\r\n- **Updated Service** (`src/service.ts`):\r\n  - Added `'callback_query'` to `allowedUpdates` in bot launch config\r\n  - Registered callback query event handler\r\n  - Integrated with existing middleware pipeline\r\n\r\n### 4. Documentation & Examples\r\n- **Comprehensive Examples** (`examples/callbackMenuAction.ts`):\r\n  - Interactive menu system with navigation\r\n  - Confirmation dialog pattern\r\n  - Demonstrates edit-in-place functionality\r\n- **README Updates**: Added detailed documentation on button types, usage patterns, and best practices\r\n\r\n### 5. Test Coverage\r\n- **Unit Tests** (`__tests__/utils.test.ts`): Added 8 new test cases for callback button conversion\r\n\r\n## Testing\r\n\r\n### Test Suite Results\r\n```bash\r\npnpm run test\r\n\r\n‚úì __tests__/telegramClient.test.ts  (1 test) 3ms\r\n‚úì __tests__/utils.test.ts  (26 tests) 63ms  \r\n‚úì __tests__/messageManager.test.ts  (6 tests) 27ms\r\n\r\nTest Files  3 passed (3)\r\n     Tests  33 passed (33)\r\n```\r\n\r\n### Unit Tests Added\r\n```typescript\r\n‚úÖ convertToTelegramButtons\r\n  ‚úì should handle empty button array\r\n  ‚úì should handle null buttons\r\n  ‚úì should handle undefined buttons\r\n  ‚úì should convert URL button correctly\r\n  ‚úì should convert login button correctly\r\n  ‚úì should convert callback button correctly\r\n  ‚úì should handle mixed button types\r\n  ‚úì should handle buttons with emoji in text\r\n  ‚úì should handle callback data with special characters\r\n```\r\n\r\n### Build Verification\r\n```bash\r\npnpm run build\r\n‚úì ESM Build success\r\n‚úì DTS Build success\r\n‚úì TypeScript compilation passed (npx tsc --noEmit)\r\n```\r\n\r\n### Manual Testing Checklist\r\n- [x] Callback buttons render correctly in Telegram chat\r\n- [x] Button clicks trigger callback queries\r\n- [x] Messages update in place without creating new messages\r\n- [x] Navigation between menu levels works\r\n- [x] Callback queries are acknowledged (no loading spinner stuck)\r\n- [x] Actions can process callback_data from button presses\r\n- [x] Error handling works when callback processing fails\r\n\r\n### Compliance Verification\r\n- [x] **TypeScript Linting** (per `.cursor/linter.mdc`):\r\n  - No `any` types in new code\r\n  - Proper type definitions and type guards\r\n  - Follows ElizaOS patterns\r\n- [x] **Error Logging** (per `.cursor/logger.mdc`):\r\n  - Uses `logger` from @elizaos/core\r\n  - Provides error context\r\n  - No sensitive data logging\r\n\r\n## Usage Example\r\n\r\n```typescript\r\n// Define an interactive menu action\r\nexport const menuAction: Action = {\r\n  name: 'INTERACTIVE_MENU',\r\n  \r\n  validate: async (_runtime, message) => {\r\n    const content = message.content as TelegramContent;\r\n    return content.text === '/menu' || \r\n           content.callback_data?.startsWith('menu_');\r\n  },\r\n  \r\n  handler: async (runtime, message, _state, _options, callback) => {\r\n    const content = message.content as TelegramContent;\r\n    \r\n    if (content.callback_data === 'menu_settings') {\r\n      // Edit message with settings submenu\r\n      await callback({\r\n        text: '‚öôÔ∏è Settings',\r\n        buttons: [\r\n          { kind: 'callback', text: 'üîî Notifications', callback_data: 'menu_notif' },\r\n          { kind: 'callback', text: '‚¨ÖÔ∏è Back', callback_data: 'menu_main' }\r\n        ]\r\n      });\r\n    } else {\r\n      // Show main menu\r\n      await callback({\r\n        text: 'üì± Main Menu',\r\n        buttons: [\r\n          { kind: 'callback', text: '‚öôÔ∏è Settings', callback_data: 'menu_settings' }\r\n        ]\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n};\r\n```\r\n\r\n## Breaking Changes\r\nNone. This feature is fully backward compatible:\r\n- Existing URL and login buttons continue to work unchanged\r\n- No changes to existing APIs\r\n- Optional feature that developers can adopt incrementally\r\n\r\n## Migration Guide\r\nNo migration needed. To use callback buttons, simply add buttons with `kind: 'callback'`:\r\n\r\n```typescript\r\n// Before (still works)\r\n{ kind: 'url', text: 'Website', url: 'https://example.com' }\r\n\r\n// New callback button option\r\n{ kind: 'callback', text: 'Click Me', callback_data: 'action_1' }\r\n```\r\n\r\n## Future Enhancements\r\n- [ ] Add support for callback query answers with alerts/notifications\r\n- [ ] Implement inline query support\r\n- [ ] Add button layout helpers (rows/columns)\r\n- [ ] Support for updating specific buttons without full message edit\r\n\r\n## Related Issues\r\n- Implements feature request for interactive menus\r\n- Enables rich user interactions without external URLs\r\n- Improves UX by reducing message spam\r\n\r\n## Checklist\r\n- [x] Code follows project style guidelines\r\n- [x] Tests have been added/updated\r\n- [x] Documentation has been updated\r\n- [x] Changes are backward compatible\r\n- [x] TypeScript types are properly defined\r\n- [x] Error handling follows project patterns\r\n- [x] Examples demonstrate the feature\r\n- [x] Build passes without errors\r\n- [x] All tests pass\r\n\r\n## Screenshots/Demo\r\nThe implementation enables creating interactive experiences like:\r\n- Multi-level navigation menus\r\n- Settings panels with submenus  \r\n- Confirmation dialogs\r\n- Dynamic content that updates in place\r\n\r\nSee `examples/callbackMenuAction.ts` for a complete working demonstration.\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n- New Features\n  - Added support for Telegram callback buttons and interactive menus, including handling callback queries and in-place message updates.\n  - Expanded button options (URL, Login, Callback) with optional callback data in message content.\n- Documentation\n  - Expanded README with button types, inline menu patterns, login flow, best practices, and full examples.\n- Tests\n  - Added comprehensive tests for converting buttons, covering URL, Login, Callback, mixed inputs, and edge cases.\n- Chores\n  - Updated .gitignore to exclude .cursor (retains .turbo).\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-telegram",
      "createdAt": "2025-09-25T10:04:07Z",
      "mergedAt": null,
      "additions": 3793,
      "deletions": 18
    }
  ],
  "codeChanges": {
    "additions": 0,
    "deletions": 0,
    "files": 0,
    "commitCount": 1
  },
  "completedItems": [],
  "topContributors": [
    {
      "username": "tcm390",
      "avatarUrl": "https://avatars.githubusercontent.com/u/60634884?u=c6c41679b8322eaa0c81f72e0b4ed95e80f0ac16&v=4",
      "totalScore": 43.29080516121499,
      "prScore": 43.29080516121499,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "tcm390: Focused on significant refactoring efforts, successfully merging a PR in elizaos/eliza (#6004) that made runtime initialization idempotent and improved core functionality, while also opening two additional refactor-focused PRs in the same repository. Their work primarily involved refactoring code, with 11 commits modifying 11 files."
    },
    {
      "username": "o-ray-o",
      "avatarUrl": "https://avatars.githubusercontent.com/u/61679842?u=09b33611d65981f1436d29f49f8e24215e779f4e&v=4",
      "totalScore": 42.08939650691849,
      "prScore": 40.08939650691849,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "viktorking7",
      "avatarUrl": "https://avatars.githubusercontent.com/u/140458814?u=9822a819c8ca631b27e2507dac20c9298e85b52b&v=4",
      "totalScore": 4.654306144334055,
      "prScore": 4.654306144334055,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "viktorking7: Focused on documentation improvements, opening one PR, elizaos/eliza#6000, to fix a typo."
    },
    {
      "username": "digitalsimboja",
      "avatarUrl": "https://avatars.githubusercontent.com/u/32062279?u=11064631ad3e24d807602060c6a444827aaf9b32&v=4",
      "totalScore": 2.2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": "digitalsimboja: Focused on identifying and reporting potential issues, creating an issue in elizaos/eliza (#6003) regarding an unhandled exception."
    },
    {
      "username": "borisudovicic",
      "avatarUrl": "https://avatars.githubusercontent.com/u/31806472?u=8935f4d43fd7e4eb9bf5ff92d54d4d2f8ac8a786&v=4",
      "totalScore": 2,
      "prScore": 0,
      "issueScore": 2,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": "borisudovicic: Focused on foundational improvements for the Eliza project, creating an issue to refactor the Eliza CLI (elizaos/eliza#5860) and initiating a significant dependency migration to Zod v4 (elizaos/eliza#5999)."
    }
  ],
  "newPRs": 1,
  "mergedPRs": 0,
  "newIssues": 1,
  "closedIssues": 0,
  "activeContributors": 1
}