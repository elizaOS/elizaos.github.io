{
  "interval": {
    "intervalStart": "2025-06-16T00:00:00.000Z",
    "intervalEnd": "2025-06-17T00:00:00.000Z",
    "intervalType": "day"
  },
  "repository": "elizaos-plugins/plugin-knowledge",
  "overview": "From 2025-06-16 to 2025-06-17, elizaos-plugins/plugin-knowledge had 1 new PRs (3 merged), 0 new issues, and 5 active contributors.",
  "topIssues": [],
  "topPRs": [
    {
      "id": "PR_kwDOOu4gVs6axNR-",
      "title": "feat: add vector search to UI as educational example",
      "author": "0xbbjoker",
      "number": 23,
      "body": "add vector search to UI as educational example\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n- **New Features**\n  - Introduced semantic search in the Knowledge tab, allowing users to search knowledge fragments using natural language queries with adjustable similarity thresholds and result limits.\n  - Search results display match percentages, document filenames, content snippets, and fragment positions.\n  - Added a new search API endpoint to support semantic knowledge searches.\n- **Bug Fixes**\n  - Improved memory retrieval to ensure results are correctly scoped to the current agent.\n- **Chores**\n  - Updated the application version number.\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-knowledge",
      "createdAt": "2025-06-16T18:50:52Z",
      "mergedAt": "2025-06-16T23:59:49Z",
      "additions": 375,
      "deletions": 44
    },
    {
      "id": "PR_kwDOOu4gVs6ZvdJC",
      "title": "Fix: Unique Knowledge/Memory Ids in actions.ts",
      "author": "wookosh",
      "number": 17,
      "body": "# Relates to\r\n\r\nhttps://github.com/elizaos-plugins/plugin-knowledge/issues/16\r\n\r\nThis most likely went unnoticed for three reasons:\r\n1. Eliza still responds postively even if the memory is not stored as 'knowledge'.\r\n2. Because the last few messages are in the context window, both the request to store the memory and the positive response from Eliza are in subsequent queries.\r\n3. The browser client correctly calls `createUniqueUuid` with the agent runtime. \r\n\r\n# Risks\r\n**Low Risk** - Instead of using `createUniqueUuid`, we are using `stringToUuid` in two different places\r\n\r\n# Background\r\n## What does this PR fix?\r\nThe way we generate unique ids for memories, specifically in `actions.ts`:\r\n\r\n```ts\r\n// for documents\r\nclientDocumentId: createUniqueUuid(runtime.agentId + fileName + Date.now(), fileName),\r\n// ...\r\n// for text\r\nclientDocumentId: createUniqueUuid(runtime.agentId + \"text\" + Date.now(), \"user-knowledge\"),\r\n```\r\n\r\nis not unique at all. for text, the result is always `4e394ea6-af35-0010-8047-94bccb8b8e5b` since `createUniqueUuid(runtime.agentId + \"text\" + Date.now(), \"user-knowledge\")` always results in `stringToUuid(\"user-knowledge:undefined\")`. \r\n\r\nFor documents, the result is `stringToUuid(fileName)` which is only unique if the file name is unique.\r\n\r\n## Proposed Fix\r\nTo maintain the initial intent of the code, we should use `stringToUuid` for both text and documents using the existing seeds: `runtime.agentId + fileName + Date.now()` and `runtime.agentId + \"text\" + Date.now() + \"user-knowledge\"`.\r\n\r\n# Documentation changes needed?\r\nNo.\r\n\r\n# Testing\r\n## Where should a reviewer start?\r\n1. Two new tests were added to `__tests__/action.test.ts` to ensure that the unique ids are generated correctly.\r\n2. Existings tests were updated to Mock `Date.now()` to generate predictable ids. \r\n3. To truly verify knowledge is being stored, the \"memories\" table needs to be checked. \r\n\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n- **Tests**\n\t- Enhanced tests to ensure that document IDs are uniquely and deterministically generated based on file content, text, and timestamps.\n\t- Added new tests to verify uniqueness and time-sensitivity of document IDs in different scenarios.\n\n- **Refactor**\n\t- Updated the method for generating document IDs to improve consistency and reliability. No changes to user-facing features or public APIs.\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-knowledge",
      "createdAt": "2025-06-09T20:05:33Z",
      "mergedAt": "2025-06-16T22:45:34Z",
      "additions": 148,
      "deletions": 9
    },
    {
      "id": "PR_kwDOOu4gVs6ZxgWo",
      "title": "Fix: Bad base64 regex",
      "author": "wookosh",
      "number": 18,
      "body": "# Background\r\n## What does this PR fix?\r\nIn `service.ts` There is a check to see if text content is base64 using an invalid regular expression. \r\n\r\nOld expression: `/^[A-Za-z0-9+/]+=*$/`\r\n\r\n## Proposed Fix\r\n1. Move base64 check to a utility function\r\n2. New expression: `^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/`\r\n\r\nSee https://stackoverflow.com/questions/475074/regex-to-parse-or-validate-base64-data for details\r\nGPT-4o also suggested the above expression.\r\n\r\n# Documentation changes needed?\r\nNo.\r\n\r\n# Testing\r\n## Where should a reviewer start?\r\n1. Several tests were added to `__tests__/utils.test.ts`\r\n3. Since it's a small, self contained utility function, easy to try locally and add more use-cases. \r\n\r\n# Risks\r\n**Low Risk** - This function is only used in one place and very easy to test. \r\n\r\n\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n\n## Summary by CodeRabbit\n\n- **New Features**\n  - Added a utility to detect if a string appears to be Base64-encoded.\n- **Refactor**\n  - Updated Base64 detection in document processing to use the new utility for improved consistency.\n- **Tests**\n  - Introduced comprehensive tests to ensure accurate Base64 detection, including various valid, invalid, and edge case inputs.\n\n<!-- end of auto-generated comment: release notes by coderabbit.ai -->",
      "repository": "elizaos-plugins/plugin-knowledge",
      "createdAt": "2025-06-10T02:33:06Z",
      "mergedAt": "2025-06-16T22:46:05Z",
      "additions": 40,
      "deletions": 6
    }
  ],
  "codeChanges": {
    "additions": 563,
    "deletions": 59,
    "files": 9,
    "commitCount": 12
  },
  "completedItems": [
    {
      "title": "feat: add vector search to UI as educational example",
      "prNumber": 23,
      "type": "feature",
      "body": "add vector search to UI as educational example\n\n<!-- This is an auto-generated comment: release notes by coderabbit.ai -->\n## Summary by CodeRabbit\n\n- **New Features**\n  - Introduced semantic search in the Knowledge tab, allowing users to s",
      "files": [
        "package.json",
        "src/frontend/ui/knowledge-tab.tsx",
        "src/routes.ts",
        "src/service.ts",
        "src/types.ts"
      ]
    },
    {
      "title": "Fix: Bad base64 regex",
      "prNumber": 18,
      "type": "bugfix",
      "body": "# Background\r\n## What does this PR fix?\r\nIn `service.ts` There is a check to see if text content is base64 using an invalid regular expression. \r\n\r\nOld expression: `/^[A-Za-z0-9+/]+=*$/`\r\n\r\n## Proposed Fix\r\n1. Move base64 check to a utility",
      "files": [
        "__tests__/utils.test.ts",
        "src/service.ts",
        "src/utils.ts"
      ]
    },
    {
      "title": "Fix: Unique Knowledge/Memory Ids in actions.ts",
      "prNumber": 17,
      "type": "bugfix",
      "body": "# Relates to\r\n\r\nhttps://github.com/elizaos-plugins/plugin-knowledge/issues/16\r\n\r\nThis most likely went unnoticed for three reasons:\r\n1. Eliza still responds postively even if the memory is not stored as 'knowledge'.\r\n2. Because the last few",
      "files": [
        "__tests__/action.test.ts",
        "src/actions.ts"
      ]
    }
  ],
  "topContributors": [
    {
      "username": "wtfsayo",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82053242?u=98209a1f10456f42d4d2fa71db4d5bf4a672cbc3&v=4",
      "totalScore": 176.83763080296222,
      "prScore": 176.39963080296224,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.43799999999999994,
      "summary": null
    },
    {
      "username": "0xbbjoker",
      "avatarUrl": "https://avatars.githubusercontent.com/u/54844437?u=90fe1762420de6ad493a1c1582f1f70c0d87d8e2&v=4",
      "totalScore": 93.9306841628588,
      "prScore": 83.59068416285879,
      "issueScore": 0,
      "reviewScore": 10,
      "commentScore": 0.33999999999999997,
      "summary": null
    },
    {
      "username": "tcm390",
      "avatarUrl": "https://avatars.githubusercontent.com/u/60634884?u=c6c41679b8322eaa0c81f72e0b4ed95e80f0ac16&v=4",
      "totalScore": 71.38345838949215,
      "prScore": 71.38345838949215,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "ChristopherTrimboli",
      "avatarUrl": "https://avatars.githubusercontent.com/u/27584221?u=0d816ce1dcdea8f925aba18bb710153d4a87a719&v=4",
      "totalScore": 54.5437738965761,
      "prScore": 49.5437738965761,
      "issueScore": 0,
      "reviewScore": 5,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "lalalune",
      "avatarUrl": "https://avatars.githubusercontent.com/u/18633264?u=e2e906c3712c2506ebfa98df01c2cfdc50050b30&v=4",
      "totalScore": 49.78677389657609,
      "prScore": 49.78677389657609,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "soyrubio",
      "avatarUrl": "https://avatars.githubusercontent.com/u/70545288?u=cbbec71fcd4cd8c34a38a6689a072bbba98b27de&v=4",
      "totalScore": 23.790573590279973,
      "prScore": 23.790573590279973,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "github-advanced-security",
      "avatarUrl": "https://avatars.githubusercontent.com/in/57789?v=4",
      "totalScore": 9,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 9,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "Dexploarer",
      "avatarUrl": "https://avatars.githubusercontent.com/u/211557447?u=21a243d61cc1f87574328ae07fc64d7d7577b53d&v=4",
      "totalScore": 4.5,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 4.5,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "sicco-moonbeam",
      "avatarUrl": "https://avatars.githubusercontent.com/u/92480254?u=d0a396ee2f37b5bb3944aa58a7e75ee3a7e4cda3&v=4",
      "totalScore": 4,
      "prScore": 0,
      "issueScore": 4,
      "reviewScore": 0,
      "commentScore": 0,
      "summary": null
    },
    {
      "username": "alex-nax",
      "avatarUrl": "https://avatars.githubusercontent.com/u/82507604?u=b3af75d82f80ed83007a77c351a64bdd9e5d67de&v=4",
      "totalScore": 0.2,
      "prScore": 0,
      "issueScore": 0,
      "reviewScore": 0,
      "commentScore": 0.2,
      "summary": null
    }
  ],
  "newPRs": 1,
  "mergedPRs": 3,
  "newIssues": 0,
  "closedIssues": 0,
  "activeContributors": 5
}